arch 65816
hirom
fillbyte $FF
padbyte $FF




org $898053
db $C2,$0B,$48,$85,$AC,$A9,$8E,$A5,$AC,$A0,$A2,$8E,$82,$84,$84,$83,$2B,$AC,$A9,$8E,$A5,$CB,$D6,$EF,$8D,$8E,$A4,$AC,$81,$84,$AC,$80,$81,$8B,$84,$AC,$A4,$8E,$CB,$D7,$B9,$81,$80,$82,$8A,$2A,$2A,$2A,$CF,$48,$85,$AC,$A9,$8E,$A5,$AC,$D6,$F1,$A4,$8E,$AC,$86,$8E,$AC,$A4,$8E,$AC,$CB,$43,$80,$8E,$2B,$AC,$D6,$1F,$A4,$A2,$80,$8D,$A3,$A0,$8E,$A2,$A4,$AC,$D7,$C7,$CB,$AC,$D6,$42,$CB,$AC,$62,$84,$A4,$A5,$A2,$8D,$AC,$A4,$8E,$AC,$43,$80,$8E,$AC,$D6,$EC,$CA

;org $8980C1

org $89811E
db $C2,$0A,$46,$8E,$AC,$A4,$8E,$AC,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$0D,$CB,$AC,$61,$A5,$88,$A4,$CB,$AC,$62,$84,$A4,$A5,$A2,$8D,$CA

;org $898144

org $8981F4
db $C2,$0A,$C2,$06,$D5,$00,$D6,$36,$D7,$3E,$81,$84,$AC,$D6,$D9,$CB,$A3,$8E,$8E,$8D,$2B,$AC,$67,$88,$8B,$8B,$2A,$CF,$63,$80,$A9,$AC,$87,$84,$8B,$8B,$8E,$AC,$A4,$8E,$AC,$CB,$D6,$FE,$D7,$67,$85,$8E,$A2,$AC,$8C,$84,$2A,$AC,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$64,$87,$80,$8D,$8A,$A3,$2A,$AC,$CB,$48,$AC,$D6,$A4,$A9,$8E,$A5,$AC,$D6,$EF,$D7,$84,$CB,$80,$AC,$D6,$95,$A0,$A2,$84,$A3,$88,$83,$84,$8D,$A4,$2A,$AC,$CF,$C2,$03,$44,$A2,$88,$8A,$2F,$AC,$40,$80,$80,$87,$2A,$AC,$CB,$48,$AC,$D7,$6E,$48,$AC,$D6,$FA,$A3,$84,$84,$AC,$A9,$8E,$A5,$AC,$CB,$85,$8E,$A2,$AC,$80,$AC,$D6,$A6,$A4,$88,$8C,$84,$2A,$AC,$CF,$D6,$61,$A9,$8E,$A5,$0E,$A6,$84,$AC,$85,$88,$8D,$88,$A3,$87,$84,$83,$CB,$D6,$FE,$81,$A5,$A3,$88,$8D,$84,$A3,$A3,$2B,$AC,$87,$A5,$A2,$A2,$A9,$CB,$D6,$73,$A4,$8E,$AC,$D6,$47,$42,$80,$A0,$84,$2A,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$64,$87,$80,$8D,$8A,$AC,$D7,$C7,$48,$0E,$8C,$AC,$CB,$86,$8B,$80,$83,$AC,$A7,$84,$AC,$80,$8B,$8B,$AC,$D6,$B3,$A4,$87,$84,$AC,$CB,$A4,$A2,$88,$A0,$AC,$A4,$8E,$86,$84,$A4,$87,$84,$A2,$2A,$AC,$CF,$C2,$03,$44,$A2,$88,$8A,$2F,$AC,$CB,$4E,$8D,$AC,$D6,$D6,$A4,$A2,$88,$A0,$2B,$AC,$D6,$89,$CB,$D6,$8F,$A3,$8E,$8C,$84,$A4,$87,$88,$8D,$86,$2A,$AC,$CF,$4B,$80,$8D,$82,$84,$AC,$8C,$84,$A4,$AC,$D6,$2C,$80,$8D,$83,$AC,$CB,$D6,$8F,$87,$88,$A3,$AC,$D7,$7A,$85,$80,$A4,$87,$84,$A2,$2A,$AC,$CF,$D7,$23,$83,$84,$82,$88,$83,$84,$83,$AC,$A4,$8E,$AC,$CB,$D6,$E7,$D6,$BE,$87,$88,$A3,$AC,$CB,$A0,$80,$A2,$84,$8D,$A4,$A3,$0E,$AC,$82,$8E,$8C,$A0,$80,$8D,$A9,$2A,$AC,$CF,$D6,$26,$D6,$CB,$A4,$8E,$AC,$D7,$95,$CB,$8B,$88,$A6,$84,$2B,$AC,$80,$8D,$83,$AC,$A3,$80,$A7,$AC,$80,$AC,$D6,$F5,$CB,$D6,$BF,$A4,$87,$84,$AC,$82,$80,$A3,$A4,$8B,$84,$2A,$AC,$CF,$48,$0E,$8C,$AC,$D6,$93,$A4,$8E,$AC,$84,$A8,$82,$A5,$A3,$84,$AC,$CB,$8C,$A9,$A3,$84,$8B,$85,$2A,$CF,$45,$88,$8D,$80,$8B,$8B,$A9,$2B,$AC,$48,$AC,$82,$80,$8D,$AC,$86,$8E,$AC,$CB,$A4,$8E,$AC,$A4,$87,$84,$AC,$81,$80,$A4,$87,$A2,$8E,$8E,$8C,$AC,$81,$A9,$AC,$CB,$8C,$A9,$A3,$84,$8B,$85,$AC,$80,$A4,$AC,$8D,$88,$86,$87,$A4,$4F,$AC,$CF,$C2,$06,$D6,$36,$CB,$47,$80,$AC,$87,$80,$AC,$87,$80,$2A,$AC,$D6,$24,$D6,$A5,$44,$A2,$88,$8A,$2A,$AC,$CF,$D6,$26,$87,$80,$A3,$8D,$0E,$A4,$AC,$D6,$D4,$CB,$D6,$6C,$85,$8E,$A2,$AC,$80,$AC,$A7,$87,$88,$8B,$84,$2A,$AC,$CF,$48,$AC,$D6,$FA,$A3,$84,$84,$AC,$67,$88,$8B,$8B,$AC,$85,$8E,$A2,$AC,$80,$AC,$CB,$D6,$A6,$A4,$88,$8C,$84,$2A,$AC,$D6,$1F,$A3,$80,$A9,$AC,$CB,$86,$8E,$8E,$83,$81,$A9,$84,$AC,$A4,$8E,$AC,$87,$88,$8C,$2A,$AC,$CF,$C2,$01,$D6,$25,$CB,$D5,$04,$47,$8C,$8C,$8C,$2A,$AC,$62,$88,$86,$87,$A4,$2A,$2A,$2A,$CF,$C2,$06,$D5,$01,$D6,$36,$CB,$D7,$41,$A2,$84,$80,$82,$87,$84,$83,$AC,$A4,$87,$84,$AC,$CB,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$2A,$AC,$CF,$4E,$4A,$2B,$AC,$67,$88,$8B,$8B,$2A,$AC,$CB,$48,$A3,$AC,$D6,$FE,$A0,$80,$A2,$80,$82,$87,$A5,$A4,$84,$AC,$A2,$84,$80,$83,$A9,$0D,$AC,$CB,$D6,$2B,$86,$8E,$2A,$C3,$00,$C0
;org $8984B1
db $C2,$0A,$C2,$00,$D5,$02,$48,$AC,$89,$A5,$8C,$A0,$84,$83,$AC,$8E,$A5,$A4,$AC,$D6,$BE,$A4,$87,$84,$CB,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$2A,$CF,$48,$AC,$87,$80,$83,$8D,$0E,$A4,$AC,$D6,$70,$D6,$D9,$CB,$88,$8D,$AC,$80,$AC,$A9,$84,$80,$A2,$AC,$80,$8D,$83,$AC,$80,$AC,$87,$80,$8B,$85,$2A,$2A,$2A,$C9,$B4,$C3,$00,$C8,$CA

;org $898505

org $898577
db $C2,$0A,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$CB,$4A,$80,$A2,$80,$4F,$AC,$CB,$D6,$65,$83,$88,$83,$AC,$A9,$8E,$A5,$AC,$86,$8E,$0D,$4F,$AC,$CF,$C2,$01,$D6,$25,$64,$87,$84,$A2,$84,$AC,$A7,$80,$A3,$AC,$D7,$AC,$CB,$D6,$D7,$A4,$87,$84,$AC,$D7,$BE,$CB,$D7,$C4,$87,$80,$83,$AC,$82,$8E,$8C,$84,$2A,$2A,$2A,$AC,$CF,$64,$87,$84,$A9,$AC,$A3,$80,$A9,$AC,$D6,$D7,$87,$84,$A2,$AC,$D6,$72,$CB,$88,$A3,$AC,$84,$A4,$84,$A2,$8D,$80,$8B,$2A,$2A,$2A,$AC,$CF,$64,$87,$84,$A9,$AC,$A3,$80,$A9,$AC,$D6,$D7,$8E,$8D,$82,$84,$AC,$A4,$87,$84,$CB,$D6,$7B,$88,$A3,$AC,$86,$8E,$8D,$84,$2B,$CF,$A3,$87,$84,$0E,$8B,$8B,$AC,$81,$84,$AC,$80,$81,$8B,$84,$AC,$A4,$8E,$CB,$D7,$9C,$88,$8D,$AC,$A0,$84,$80,$82,$84,$2A,$C0

;org $898620

org $8986E1
db $C2,$0A,$C2,$00,$4A,$80,$A2,$80,$0E,$A3,$AC,$8D,$8E,$A4,$AC,$87,$84,$A2,$84,$2A,$2A,$2A,$AC,$CB,$D6,$65,$83,$88,$83,$AC,$A3,$87,$84,$AC,$86,$8E,$2A,$2A,$2A,$0D,$C3,$00,$C0

;org $89870C

org $898903
db $C2,$09,$C2,$00,$D2,$00,$4E,$8D,$84,$AC,$A7,$8E,$A2,$8D,$6D,$8E,$A5,$A4,$AC,$D6,$72,$88,$A3,$CB,$A1,$A5,$88,$84,$A4,$8B,$A9,$AC,$8B,$80,$88,$83,$AC,$83,$8E,$A7,$8D,$2A,$2A,$2A,$CF,$48,$8D,$AC,$87,$88,$A3,$AC,$87,$84,$80,$83,$2B,$AC,$80,$AC,$85,$80,$8C,$88,$8B,$88,$80,$A2,$AC,$CB,$D6,$EE,$A3,$A0,$84,$80,$8A,$A3,$2A,$AC,$CF,$C2,$04,$D2,$10,$D5,$02,$67,$88,$8B,$8B,$2A,$AC,$D6,$1D,$8C,$84,$2B,$AC,$CB,$4E,$8B,$8C,$80,$8D,$2B,$AC,$D6,$FE,$85,$80,$A4,$87,$84,$A2,$2A,$AC,$CF,$4C,$A9,$AC,$D6,$72,$87,$80,$A3,$AC,$83,$84,$82,$80,$A9,$84,$83,$2B,$AC,$81,$A5,$A4,$CB,$48,$AC,$D6,$AF,$8E,$8D,$AC,$D6,$A5,$A4,$87,$88,$A3,$2A,$2A,$2A,$C3,$00,$C0
;org $8989A2
db $C2,$0B,$C2,$00,$D5,$01,$67,$88,$8B,$8B,$2F,$AC,$45,$80,$A4,$87,$84,$A2,$4F,$CB,$67,$87,$A9,$AC,$80,$A2,$84,$AC,$A9,$8E,$A5,$AC,$88,$8D,$AC,$A4,$87,$80,$A4,$CB,$85,$8E,$A2,$8C,$4F,$4F,$4F,$CF,$C2,$04,$D5,$02,$64,$87,$84,$A2,$84,$0E,$A3,$AC,$80,$AC,$D6,$C7,$A2,$8E,$8E,$8C,$CB,$88,$8D,$AC,$A4,$87,$84,$AC,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$2B,$CB,$85,$88,$8B,$8B,$84,$83,$AC,$D6,$F0,$A4,$87,$84,$AC,$8B,$88,$86,$87,$A4,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$82,$8E,$8C,$84,$A4,$2A,$CF,$64,$88,$8C,$84,$AC,$86,$8E,$84,$A3,$AC,$A3,$8E,$AC,$85,$80,$A3,$A4,$AC,$A4,$87,$84,$A2,$84,$CB,$D6,$D7,$D6,$C1,$84,$A6,$8E,$8B,$A6,$84,$CB,$D6,$ED,$A1,$A5,$88,$82,$8A,$8B,$A9,$2A,$2A,$2A,$CF,$C2,$00,$D5,$01,$67,$88,$8B,$8B,$2F,$AC,$CB,$67,$87,$A9,$AC,$80,$A2,$84,$AC,$D6,$26,$80,$8D,$83,$AC,$48,$AC,$CB,$80,$81,$8B,$84,$AC,$A4,$8E,$AC,$8B,$88,$A6,$84,$0D,$4F,$AC,$CF,$C2,$04,$D5,$02,$67,$88,$8B,$8B,$0E,$A3,$AC,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$CB,$41,$84,$82,$80,$A5,$A3,$84,$AC,$A9,$8E,$A5,$AC,$A4,$A7,$8E,$AC,$80,$A2,$84,$AC,$CB,$84,$A6,$8E,$8B,$A6,$84,$83,$AC,$87,$A5,$8C,$80,$8D,$A3,$2A,$AC,$CF,$C2,$01,$D5,$01,$D6,$25,$CB,$65,$A3,$2A,$2A,$2A,$0D,$AC,$CF,$C2,$04,$D5,$02,$67,$88,$8B,$8B,$0E,$A3,$AC,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$4B,$8E,$8D,$86,$AC,$80,$86,$8E,$AC,$CB,$D6,$D9,$84,$A8,$88,$A3,$A4,$84,$83,$AC,$81,$88,$8E,$8B,$8E,$86,$88,$82,$80,$8B,$AC,$CB,$A4,$84,$82,$87,$8D,$8E,$8B,$8E,$86,$A9,$AC,$A5,$A3,$88,$8D,$86,$AC,$A4,$87,$84,$AC,$CB,$D6,$A8,$8E,$85,$AC,$A4,$87,$84,$AC,$82,$8E,$8C,$84,$A4,$2A,$AC,$CF,$D6,$3D,$85,$A2,$84,$84,$8B,$A9,$AC,$D7,$BB,$A4,$87,$84,$CB,$D6,$C2,$A4,$8E,$AC,$8C,$80,$8A,$84,$CB,$A0,$8B,$80,$8D,$A4,$A3,$AC,$80,$8D,$83,$AC,$80,$8D,$88,$8C,$80,$8B,$A3,$2A,$CF,$45,$8E,$A2,$AC,$84,$A8,$80,$8C,$A0,$8B,$84,$2B,$AC,$D7,$AB,$D6,$B3,$CB,$A4,$87,$84,$AC,$82,$80,$8C,$84,$8B,$2A,$AC,$48,$A4,$AC,$82,$80,$8D,$AC,$86,$8E,$AC,$CB,$85,$8E,$A2,$AC,$D6,$A6,$A0,$84,$A2,$88,$8E,$83,$A3,$AC,$CB,$D6,$F8,$85,$8E,$8E,$83,$AC,$8E,$A2,$AC,$A7,$80,$A4,$84,$A2,$2A,$AC,$CF,$D6,$61,$D6,$C1,$A2,$84,$80,$8B,$88,$AA,$84,$83,$AC,$A4,$87,$84,$CB,$D6,$C2,$D6,$7A,$81,$84,$AC,$D7,$BB,$80,$A3,$CB,$80,$AC,$A7,$84,$80,$A0,$8E,$8D,$2B,$CB,$D6,$87,$D6,$F2,$83,$84,$A6,$84,$8B,$8E,$A0,$84,$83,$2A,$CF,$64,$87,$84,$AC,$D6,$F5,$A7,$80,$A3,$AC,$8E,$8D,$AC,$A4,$87,$84,$CB,$81,$A2,$88,$8D,$8A,$AC,$8E,$85,$AC,$A2,$A5,$88,$8D,$2A,$2A,$2A,$CF,$40,$A4,$AC,$D6,$D7,$A4,$88,$8C,$84,$2B,$AC,$A4,$87,$84,$AC,$4A,$8D,$88,$86,$87,$A4,$A3,$AC,$CB,$8E,$85,$AC,$43,$80,$A2,$8A,$8D,$84,$A3,$A3,$AC,$80,$8D,$83,$AC,$4B,$88,$86,$87,$A4,$AC,$CB,$D6,$F2,$83,$84,$A6,$84,$8B,$8E,$A0,$84,$83,$AC,$A4,$8E,$AC,$83,$84,$82,$88,$83,$84,$AC,$CB,$A4,$87,$84,$AC,$D7,$6B,$8E,$85,$AC,$87,$A5,$8C,$80,$8D,$88,$A4,$A9,$2A,$AC,$CF,$64,$87,$84,$A9,$AC,$80,$A2,$84,$AC,$D6,$FE,$80,$8D,$82,$84,$A3,$A4,$8E,$A2,$A3,$2A,$CF,$64,$87,$84,$AC,$A3,$88,$A8,$AC,$4C,$A9,$A3,$A4,$88,$82,$AC,$63,$A4,$80,$A4,$A5,$84,$A3,$CB,$D6,$F2,$D6,$B3,$81,$A9,$AC,$A4,$87,$84,$CB,$4A,$8D,$88,$86,$87,$A4,$A3,$2A,$CF,$64,$87,$84,$AC,$D7,$79,$4C,$A9,$A3,$A4,$88,$82,$AC,$D6,$48,$CB,$88,$A3,$AC,$84,$8D,$A4,$A2,$A5,$A3,$A4,$84,$83,$AC,$A4,$8E,$AC,$D7,$C7,$C0
;org $898CAA
db $C2,$0B,$C2,$04,$D5,$02,$D7,$38,$A4,$87,$84,$AC,$D6,$7B,$D6,$EF,$CB,$81,$84,$AC,$D6,$ED,$82,$8B,$8E,$A3,$84,$2A,$CF,$C9,$1E,$41,$A9,$AC,$A4,$87,$84,$8D,$2B,$AC,$A4,$87,$84,$AC,$A4,$A7,$8E,$AC,$8E,$85,$AC,$A9,$8E,$A5,$AC,$CB,$D6,$B2,$86,$8E,$AC,$A4,$8E,$AC,$A4,$87,$84,$AC,$A2,$8E,$8E,$85,$AC,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$A4,$8E,$A7,$84,$A2,$2A,$AC,$CB,$C9,$28,$D5,$04,$42,$8B,$8E,$A3,$84,$AC,$D6,$FE,$84,$A9,$84,$A3,$2A,$2A,$2A,$2A,$C0

;org $898D18

org $898DFD
db $D3,$C2,$01,$D6,$25,$CB,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$C3,$00,$C0
;org $898E17
db $D3,$C2,$00,$D5,$00,$D6,$61,$67,$88,$8B,$8B,$AC,$80,$8D,$83,$AC,$D6,$26,$CB,$89,$8E,$88,$8D,$84,$83,$AC,$80,$8D,$83,$AC,$81,$84,$82,$80,$8C,$84,$AC,$8E,$8D,$84,$AC,$CB,$D6,$F0,$A4,$87,$84,$AC,$4B,$88,$86,$87,$A4,$AC,$4A,$8D,$88,$86,$87,$A4,$2B,$AC,$80,$AC,$CB,$D6,$95,$D6,$C2,$A7,$80,$A3,$AC,$81,$8E,$A2,$8D,$2A,$2A,$2A,$AC,$CF,$64,$87,$84,$AC,$4A,$8D,$88,$86,$87,$A4,$A3,$AC,$D6,$F2,$D6,$75,$CB,$85,$8E,$A2,$A4,$87,$2A,$AC,$64,$87,$84,$AC,$D6,$0C,$4A,$8D,$88,$86,$87,$A4,$0E,$A3,$AC,$CB,$A5,$8B,$A4,$88,$8C,$80,$A4,$84,$AC,$A0,$8E,$A7,$84,$A2,$2B,$AC,$A4,$87,$84,$AC,$CB,$D7,$10,$A7,$80,$A3,$AC,$A2,$84,$8B,$84,$80,$A3,$84,$83,$4F,$C3,$00,$C0
;org $898EB8
db $C2,$0D,$C2,$04,$D5,$00,$D6,$68,$81,$80,$A4,$A4,$8B,$84,$AC,$D6,$EF,$82,$87,$80,$8D,$86,$84,$CB,$A4,$87,$84,$AC,$D7,$6B,$8E,$85,$AC,$87,$A5,$8C,$80,$8D,$88,$A4,$A9,$2A,$CF,$4D,$8E,$A7,$AC,$A9,$8E,$A5,$AC,$D6,$B2,$86,$8E,$CB,$A4,$8E,$AC,$A4,$87,$84,$AC,$82,$8E,$8C,$84,$A4,$4F,$4F,$C3,$00,$C0

;org $898F01

org $899068
db $C2,$0F,$C2,$04,$D5,$00,$67,$88,$8B,$8B,$0E,$A3,$AC,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$CB,$64,$87,$84,$AC,$80,$8D,$82,$88,$84,$8D,$A4,$A3,$AC,$A7,$8E,$A2,$A3,$87,$88,$A0,$A0,$84,$83,$AC,$CB,$A4,$87,$84,$AC,$D6,$7B,$80,$A3,$AC,$80,$AC,$A3,$A0,$88,$A2,$88,$A4,$2A,$AC,$CF,$64,$87,$8E,$A3,$84,$AC,$A7,$87,$8E,$AC,$81,$80,$A4,$87,$84,$83,$AC,$88,$8D,$AC,$CB,$A4,$87,$84,$AC,$D7,$55,$D6,$A8,$D6,$F2,$CB,$86,$88,$A6,$84,$8D,$AC,$80,$AC,$D6,$C7,$A0,$8E,$A7,$84,$A2,$2A,$AC,$CF,$64,$87,$84,$AC,$D6,$7B,$88,$A3,$AC,$D7,$54,$80,$AC,$CB,$A3,$A0,$88,$A2,$88,$A4,$2A,$AC,$41,$A5,$A4,$AC,$D6,$9F,$CB,$80,$8D,$AC,$A5,$8D,$A7,$84,$8B,$82,$8E,$8C,$84,$AC,$A3,$A0,$88,$A2,$88,$A4,$2A,$AC,$CF,$44,$A6,$8E,$8B,$A6,$88,$8D,$86,$AC,$A4,$8E,$8E,$AC,$85,$80,$A3,$A4,$CB,$81,$A2,$88,$8D,$86,$A3,$AC,$83,$84,$A3,$A4,$A2,$A5,$82,$A4,$88,$8E,$8D,$2A,$2A,$2A,$CF,$40,$A3,$AC,$D6,$A6,$80,$A3,$AC,$A0,$84,$8E,$A0,$8B,$84,$CB,$D6,$98,$84,$A6,$88,$8B,$AC,$87,$84,$80,$A2,$A4,$A3,$2B,$CB,$D6,$87,$D6,$EF,$81,$84,$AC,$81,$8E,$A2,$8D,$2A,$CF,$67,$88,$8B,$8B,$2B,$AC,$8E,$A0,$84,$8D,$AC,$D6,$FE,$D7,$60,$CB,$80,$8D,$83,$AC,$D6,$A9,$80,$A2,$8E,$A5,$8D,$83,$2A,$AC,$C0
;org $899182
db $C2,$0F,$C2,$04,$67,$88,$8B,$8B,$0E,$A3,$AC,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$48,$AC,$D6,$BA,$CB,$A4,$8E,$AC,$D7,$AC,$A4,$8E,$AC,$A9,$8E,$A5,$2A,$C3,$00,$C0
;org $8991A9
db $C2,$0F,$C2,$04,$D5,$00,$67,$88,$8B,$8B,$0E,$A3,$AC,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$40,$A4,$AC,$D7,$79,$CB,$A4,$87,$84,$AC,$D6,$DF,$88,$A3,$AC,$8D,$84,$80,$A2,$2A,$AC,$CF,$44,$A6,$84,$A2,$A9,$8E,$8D,$84,$2A,$AC,$CB,$46,$88,$A6,$84,$AC,$67,$88,$8B,$8B,$AC,$D6,$FE,$A0,$8E,$A7,$84,$A2,$4F,$C3,$00,$C0

;org $8991F4

org $89923A
db $D3,$C2,$05,$63,$84,$A4,$87,$2F,$AC,$40,$87,$2B,$AC,$67,$88,$8B,$8B,$2A,$AC,$CB,$D6,$1D,$D6,$70,$80,$AC,$D6,$A6,$A4,$88,$8C,$84,$2A,$AC,$CF,$63,$A5,$82,$87,$AC,$80,$AC,$A7,$8E,$A2,$8B,$83,$2A,$AC,$48,$85,$AC,$48,$AC,$CB,$D6,$7A,$D7,$AC,$8E,$85,$AC,$D6,$D6,$80,$A4,$AC,$CB,$80,$8D,$AC,$80,$82,$80,$83,$84,$8C,$A9,$AC,$48,$0E,$83,$AC,$81,$84,$AC,$CB,$80,$AC,$D6,$95,$A3,$82,$87,$8E,$8B,$80,$A2,$2A,$C3,$00,$C0

;org $8992A0

org $8992EC
db $D3,$D6,$37,$85,$80,$A4,$87,$84,$A2,$2F,$AC,$CB,$4D,$84,$88,$8B,$2A,$2A,$2A,$AC,$CB,$D6,$62,$80,$A2,$84,$AC,$A9,$8E,$A5,$AC,$83,$8E,$88,$8D,$86,$4F,$4F,$AC,$CF,$48,$AC,$D6,$F1,$87,$88,$8C,$AC,$A4,$8E,$AC,$D7,$84,$A4,$87,$84,$CB,$D6,$44,$42,$8E,$8C,$A0,$80,$8D,$A9,$AC,$86,$A2,$8E,$A7,$CB,$81,$88,$86,$86,$84,$A2,$AC,$80,$8D,$83,$AC,$81,$88,$86,$86,$84,$A2,$2A,$C0

;org $899347

org $89938D
db $D3,$D6,$37,$8C,$8E,$A4,$87,$84,$A2,$2F,$AC,$D6,$12,$88,$85,$AC,$CB,$48,$AC,$82,$80,$8D,$AC,$A3,$84,$84,$AC,$A4,$87,$84,$AC,$A2,$84,$80,$8B,$CB,$A7,$8E,$A2,$8B,$83,$2B,$CB,$48,$AC,$D6,$78,$A4,$8E,$A5,$82,$87,$AC,$88,$A4,$2A,$2A,$2A,$AC,$CF,$4D,$8E,$AC,$D6,$B8,$87,$8E,$A7,$AC,$83,$88,$85,$85,$88,$82,$A5,$8B,$A4,$CB,$88,$A4,$AC,$8C,$80,$A9,$AC,$86,$84,$A4,$2B,$CB,$48,$AC,$D6,$78,$87,$84,$8B,$A0,$AC,$A9,$8E,$A5,$2A,$2A,$2A,$C0

;org $8993F8

org $89943E
db $D3,$47,$80,$8C,$8B,$84,$A4,$2F,$AC,$CB,$D6,$3A,$8E,$88,$8D,$8A,$4F,$4F,$AC,$CF,$D2,$00,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$CB,$4E,$85,$AC,$82,$8E,$A5,$A2,$A3,$84,$2A,$AC,$64,$87,$84,$A2,$84,$0E,$A3,$AC,$CB,$8D,$8E,$AC,$83,$88,$85,$85,$84,$A2,$84,$8D,$82,$84,$AC,$81,$84,$A4,$A7,$84,$84,$8D,$AC,$CB,$87,$A5,$8C,$80,$8D,$A3,$AC,$80,$8D,$83,$AC,$80,$8D,$88,$8C,$80,$8B,$A3,$2A,$2A,$2A,$C3,$00,$C0

;org $8994A0

org $8994E6
db $D3,$D7,$40,$8C,$A9,$AC,$D6,$72,$86,$8E,$8D,$84,$2B,$AC,$48,$AC,$CB,$81,$84,$82,$80,$8C,$84,$AC,$85,$8E,$A2,$84,$A6,$84,$A2,$AC,$A9,$8E,$A5,$8D,$86,$2A,$AC,$CB,$D7,$11,$A4,$87,$84,$AC,$D7,$55,$8B,$88,$86,$87,$A4,$2B,$AC,$CB,$48,$AC,$86,$80,$88,$8D,$84,$83,$AC,$88,$8C,$8C,$8E,$A2,$A4,$80,$8B,$88,$A4,$A9,$2A,$AC,$CF,$41,$A5,$A4,$AC,$88,$A3,$AC,$D6,$D9,$8C,$84,$80,$8D,$88,$8D,$86,$AC,$88,$8D,$AC,$CB,$84,$A4,$84,$A2,$8D,$80,$8B,$AC,$8B,$88,$85,$84,$0D,$AC,$48,$AC,$85,$84,$8B,$A4,$AC,$CB,$D6,$B7,$80,$8B,$88,$A6,$84,$AC,$D6,$F6,$48,$AC,$87,$80,$83,$AC,$CB,$80,$AC,$A4,$84,$A2,$8C,$88,$8D,$80,$8B,$AC,$83,$88,$A3,$84,$80,$A3,$84,$2A,$AC,$C0

;org $899586

org $89974E
db $D3,$64,$87,$84,$AC,$D6,$7B,$D6,$EF,$A3,$8E,$8E,$8D,$AC,$81,$84,$CB,$84,$8D,$A4,$84,$A2,$88,$8D,$86,$AC,$D7,$0B,$8E,$A2,$81,$88,$A4,$2A,$CB,$67,$84,$AC,$D6,$B2,$86,$8E,$AC,$A4,$8E,$AC,$A4,$87,$84,$AC,$A4,$8E,$A0,$AC,$8E,$85,$CB,$A4,$87,$84,$AC,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$2A,$2A,$2A,$C0

;org $89979D

org $899866
db $D3,$69,$8E,$A5,$AC,$D6,$F2,$D6,$75,$D6,$73,$A4,$8E,$AC,$CB,$D6,$D1,$44,$80,$A2,$A4,$87,$2A,$AC,$D6,$1F,$D6,$E7,$CB,$A9,$8E,$A5,$AC,$A4,$8E,$AC,$A4,$87,$84,$AC,$A4,$8E,$A0,$AC,$85,$8B,$8E,$8E,$A2,$2A,$C0

;org $899899

org $899914
db $C2,$0A,$C2,$00,$64,$87,$84,$AC,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$AC,$A7,$80,$A3,$CB,$83,$84,$80,$A4,$87,$8B,$A9,$AC,$A1,$A5,$88,$84,$A4,$2A,$AC,$64,$88,$8C,$84,$CB,$A3,$A4,$8E,$8E,$83,$AC,$A3,$A4,$88,$8B,$8B,$2A,$2A,$2A,$C0
;org $899952
db $C2,$09,$C2,$00,$64,$87,$84,$AC,$45,$8B,$A5,$A4,$84,$AC,$48,$AC,$87,$80,$83,$AC,$A7,$80,$A3,$CB,$D7,$5B,$87,$84,$A2,$84,$2A,$C0

;org $899972


org $899A70
db $C2,$0A,$C2,$00,$D6,$4B,$D7,$A0,$A4,$8E,$CB,$85,$80,$8B,$8B,$AC,$D6,$8E,$A4,$87,$84,$AC,$45,$8B,$A5,$A4,$84,$2A,$2A,$2A,$C3,$00,$C0
;org $899A91
db $C2,$0A,$C2,$00,$D6,$1D,$D6,$27,$44,$83,$A7,$80,$A2,$83,$0E,$A3,$CB,$D6,$07,$62,$88,$8D,$86,$4F,$4F,$CF,$48,$AC,$D6,$D8,$88,$A4,$AC,$A7,$80,$A3,$AC,$80,$CB,$83,$84,$82,$8E,$A2,$80,$A4,$88,$8E,$8D,$2B,$AC,$81,$A5,$A4,$AC,$88,$A4,$AC,$87,$80,$83,$CB,$D6,$70,$87,$88,$83,$83,$84,$8D,$AC,$A4,$87,$84,$A2,$84,$2A,$2A,$2A,$C3,$00,$CF,$CA

;org $899AE4

org $899AFE
db $CE,$C2,$00,$41,$A5,$A4,$AC,$D6,$FE,$88,$8D,$A6,$84,$8D,$A4,$8E,$A2,$A9,$CB,$88,$A3,$AC,$85,$A5,$8B,$8B,$4F,$C3,$00,$C0

;org $899B1C

org $899B8F
db $C2,$0B,$64,$87,$84,$AC,$D6,$A8,$A2,$84,$8B,$84,$80,$A3,$84,$83,$CB,$D6,$8E,$A4,$87,$84,$AC,$D6,$7B,$87,$80,$A3,$AC,$80,$CB,$A0,$A2,$8E,$85,$8E,$A5,$8D,$83,$AC,$84,$85,$85,$84,$82,$A4,$AC,$8E,$8D,$AC,$A4,$87,$84,$CB,$86,$A2,$8E,$A7,$A4,$87,$AC,$8E,$85,$AC,$D6,$B1,$A4,$87,$88,$8D,$86,$A3,$2A,$CF,$D6,$61,$A4,$87,$84,$AC,$A3,$A4,$80,$A2,$AC,$8D,$84,$80,$A2,$A3,$CB,$D7,$0B,$8E,$A2,$81,$88,$A4,$2B,$AC,$80,$8B,$8B,$CB,$D6,$B1,$D6,$E0,$84,$A8,$A0,$84,$A2,$88,$84,$8D,$82,$84,$CB,$80,$AC,$83,$A2,$80,$8C,$80,$A4,$88,$82,$AC,$84,$A6,$8E,$8B,$A5,$A4,$88,$8E,$8D,$2A,$2A,$2A,$C0
;org $899C1E
db $C2,$0B,$64,$87,$84,$AC,$A0,$80,$A3,$A3,$80,$86,$84,$AC,$8E,$85,$AC,$D6,$DF,$88,$A3,$CB,$D6,$86,$D6,$A2,$A4,$87,$84,$CB,$64,$8E,$A7,$84,$A2,$AC,$8E,$85,$AC,$41,$80,$81,$84,$8B,$2A,$2A,$2A,$AC,$CB,$64,$88,$8C,$84,$AC,$A2,$80,$82,$84,$A3,$AC,$81,$A9,$2A,$2A,$2A,$CF,$D6,$69,$8D,$8E,$A4,$AC,$8D,$8E,$A2,$8C,$80,$8B,$AC,$87,$A5,$8C,$80,$8D,$CB,$81,$84,$88,$8D,$86,$A3,$2B,$AC,$81,$84,$82,$80,$A5,$A3,$84,$CB,$A9,$8E,$A5,$AC,$82,$80,$8D,$AC,$D6,$AF,$87,$84,$A2,$84,$2A,$2A,$2A,$C0
;org $899C95
db $C2,$0A,$64,$87,$84,$AC,$84,$A6,$8E,$8B,$A5,$A4,$88,$8E,$8D,$AC,$8E,$85,$AC,$8B,$88,$A6,$88,$8D,$86,$CB,$D6,$E0,$A4,$8E,$8E,$8A,$AC,$80,$AC,$D6,$A6,$A4,$88,$8C,$84,$2A,$CF,$D7,$11,$88,$8D,$A3,$84,$82,$A4,$A3,$AC,$A4,$8E,$AC,$85,$88,$A3,$87,$2B,$CB,$D6,$8E,$A2,$84,$A0,$A4,$88,$8B,$84,$A3,$AC,$A4,$8E,$AC,$8C,$80,$8C,$8C,$80,$8B,$A3,$2B,$CB,$D7,$B6,$87,$A5,$8C,$80,$8D,$A3,$AC,$D6,$F2,$81,$8E,$A2,$8D,$2A,$CF,$40,$8D,$83,$AC,$A3,$8E,$AC,$D6,$9A,$81,$84,$88,$8D,$86,$A3,$CB,$D6,$98,$84,$A6,$8E,$8B,$A6,$84,$83,$2A,$C0
;org $899D16
db $C2,$0A,$D7,$11,$D6,$6F,$D7,$AA,$CB,$82,$8E,$8C,$84,$A4,$A3,$AC,$D6,$98,$D6,$70,$D7,$54,$CB,$A4,$87,$84,$AC,$A3,$A0,$88,$A2,$88,$A4,$A3,$AC,$8E,$85,$AC,$A3,$A4,$80,$A2,$A3,$2B,$CF,$81,$A5,$A4,$AC,$D7,$48,$A4,$87,$84,$AC,$83,$84,$8C,$8E,$8D,$AC,$CB,$8E,$85,$AC,$A3,$A4,$80,$A2,$A3,$2A,$AC,$CF,$64,$87,$84,$AC,$8E,$8D,$84,$AC,$8D,$8E,$A7,$AC,$8D,$84,$80,$A2,$88,$8D,$86,$AC,$CB,$A4,$87,$84,$AC,$D6,$14,$88,$A3,$AC,$80,$AC,$83,$84,$8C,$8E,$8D,$AC,$CB,$8E,$85,$AC,$A3,$A4,$80,$A2,$A3,$2A,$2A,$2A,$AC,$CF,$64,$87,$84,$AC,$D6,$7B,$88,$A3,$AC,$A4,$87,$84,$AC,$87,$88,$86,$87,$84,$A3,$A4,$CB,$85,$8E,$A2,$8C,$AC,$8E,$85,$AC,$82,$8E,$8D,$A3,$82,$88,$8E,$A5,$A3,$8D,$84,$A3,$A3,$2A,$CF,$64,$87,$84,$AC,$D6,$14,$D6,$EF,$84,$A6,$8E,$8B,$A6,$84,$AC,$CB,$81,$84,$A9,$8E,$8D,$83,$AC,$88,$8C,$80,$86,$88,$8D,$80,$A4,$88,$8E,$8D,$2A,$2A,$2A,$C0
;org $899DE5
db $C2,$0B,$48,$8D,$AC,$D6,$D7,$A2,$8E,$8E,$8C,$AC,$80,$A2,$84,$AC,$83,$84,$8C,$8E,$8D,$A3,$CB,$84,$A6,$8E,$8B,$A6,$84,$83,$AC,$81,$A9,$AC,$A4,$87,$84,$AC,$8B,$88,$86,$87,$A4,$2A,$CB,$69,$8E,$A5,$AC,$D6,$B2,$A0,$A5,$A4,$AC,$D6,$E6,$A4,$8E,$CB,$A3,$8B,$84,$84,$A0,$AC,$D6,$74,$A9,$8E,$A5,$AC,$86,$8E,$AC,$A5,$A0,$2A,$C0
;org $899E34
db $C2,$0B,$64,$87,$84,$AC,$D6,$14,$A4,$8E,$8E,$8A,$AC,$80,$AC,$A7,$A2,$8E,$8D,$86,$CB,$D7,$B9,$8E,$8D,$AC,$88,$A4,$A3,$AC,$A0,$80,$A4,$87,$CB,$8E,$85,$AC,$84,$A6,$8E,$8B,$A5,$A4,$88,$8E,$8D,$2A,$2A,$2A,$CF,$D6,$68,$81,$80,$A4,$A4,$8B,$84,$AC,$D6,$EF,$82,$87,$80,$8D,$86,$84,$CB,$A4,$87,$84,$AC,$D7,$6B,$8E,$85,$AC,$87,$A5,$8C,$80,$8D,$88,$A4,$A9,$2A,$C0

;org $899E8C

org $899F1B
db $C2,$0A,$C2,$01,$67,$80,$88,$A4,$2A,$2A,$2A,$2A,$C3,$00,$C0
;org $899F2A
db $C2,$0B,$C2,$00,$D5,$00,$67,$88,$8B,$8B,$2F,$AC,$CB,$4A,$80,$A2,$80,$4F,$4F,$4F,$0D,$AC,$CF,$C2,$01,$D6,$25,$48,$0E,$8C,$AC,$A3,$8E,$A2,$A2,$A9,$2A,$AC,$CB,$48,$AC,$D6,$A3,$D6,$91,$A4,$87,$80,$A4,$2B,$AC,$88,$85,$AC,$CB,$A7,$84,$AC,$A0,$80,$A2,$A4,$AC,$8D,$8E,$A7,$2B,$AC,$A7,$84,$0E,$8B,$8B,$AC,$CB,$D6,$BB,$D7,$87,$80,$86,$80,$88,$8D,$2A,$2A,$2A,$AC,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$CB,$41,$A5,$A4,$AC,$4A,$80,$A2,$80,$2B,$AC,$A7,$87,$A9,$AC,$D6,$98,$A9,$8E,$A5,$AC,$CB,$D6,$79,$87,$84,$A2,$84,$0D,$AC,$CF,$69,$8E,$A5,$AC,$D6,$78,$D6,$79,$87,$84,$A2,$84,$CB,$A5,$8D,$8B,$84,$A3,$A3,$AC,$A9,$8E,$A5,$AC,$D6,$98,$A4,$87,$84,$CB,$D6,$07,$62,$88,$8D,$86,$2A,$2A,$2A,$CF,$C2,$01,$D6,$25,$42,$8E,$A5,$8B,$83,$AC,$D6,$D7,$CB,$81,$84,$AC,$A4,$87,$84,$AC,$A2,$88,$8D,$86,$2A,$2A,$2A,$AC,$CB,$D7,$07,$A9,$8E,$A5,$AC,$D6,$90,$88,$A4,$AC,$CB,$88,$8D,$AC,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$D6,$19,$63,$87,$88,$A0,$0D,$AC,$CF,$C2,$00,$64,$87,$88,$A3,$AC,$D6,$07,$62,$88,$8D,$86,$AC,$88,$A3,$CB,$D7,$5C,$81,$8B,$A5,$84,$2A,$2A,$2A,$CF,$64,$87,$84,$AC,$A2,$88,$8D,$86,$AC,$A9,$8E,$A5,$AC,$D6,$98,$88,$A3,$CB,$D6,$A8,$81,$8B,$A5,$84,$2A,$2A,$2A,$CF,$40,$AC,$D6,$A8,$8E,$8D,$84,$CB,$80,$8D,$83,$AC,$80,$AC,$D7,$5C,$8E,$8D,$84,$2A,$2A,$2A,$CF,$67,$88,$8B,$8B,$2F,$AC,$48,$AC,$A5,$8D,$83,$84,$A2,$A3,$A4,$80,$8D,$83,$2A,$2A,$AC,$CB,$4D,$8E,$AC,$D6,$B8,$D6,$F7,$87,$80,$A0,$A0,$84,$8D,$A3,$2B,$AC,$CB,$D6,$82,$D6,$AC,$8C,$84,$2A,$C3,$00,$C0

;org $89A090
EDarkSpaceGaiaEyes:
cop #$80 : db $00
cop #$89
rtl
;org $89a096
EDarkSpaceGaiaMouth:
cop #$8D : db $01
lda #$0000 : sta $24
.Idle:
cop #$C1
lda $24 : bne +
  rtl
+:
lda $06f8 : bne +
  rtl
+:    ; org $89a0ab
cop #$23 : and #$0003
  dec : beq .AnimType2
  dec : beq .AnimType3
cop #$80 : db $01
cop #$89
cop #$C1
cop #$8B
bra .Idle
.AnimType2:
cop #$80 : db $02
cop #$89
cop #$C1
cop #$8B
bra .Idle
.AnimType3:
cop #$80 : db $03
cop #$89
cop #$C1
cop #$8B
bra .Idle

;org $89a0d7


org $89A179
db $D3,$C0
;org $89A17B
db $D3,$43,$84,$85,$84,$80,$A4,$AC,$A4,$87,$84,$AC,$84,$8D,$84,$8C,$88,$84,$A3,$CB,$88,$8D,$AC,$80,$AC,$82,$84,$A2,$A4,$80,$88,$8D,$AC,$80,$A2,$84,$80,$AC,$A4,$8E,$AC,$86,$84,$A4,$CB,$80,$8D,$AC,$88,$8D,$82,$A2,$84,$80,$A3,$84,$AC,$88,$8D,$AC,$80,$A4,$A4,$80,$82,$8A,$AC,$CB,$D6,$C2,$80,$8D,$83,$AC,$80,$AC,$89,$84,$A7,$84,$8B,$2A,$CF,$69,$8E,$A5,$AC,$D6,$B2,$83,$84,$85,$84,$80,$A4,$AC,$80,$8B,$8B,$AC,$8E,$85,$CB,$A4,$87,$84,$AC,$83,$84,$8C,$8E,$8D,$A3,$2A,$2A,$2A,$C0
;org $89A1F0
db $D3,$D6,$22,$D6,$EF,$80,$A0,$A0,$84,$80,$A2,$AC,$88,$85,$AC,$CB,$A9,$8E,$A5,$AC,$83,$84,$85,$84,$80,$A4,$AC,$80,$8D,$AC,$84,$8D,$84,$8C,$A9,$2A,$AC,$CB,$48,$85,$AC,$A9,$8E,$A5,$AC,$D6,$78,$A2,$84,$80,$82,$87,$AC,$D6,$E6,$CB,$A5,$A3,$84,$AC,$A4,$87,$84,$AC,$45,$8B,$A5,$A4,$84,$0E,$A3,$AC,$A0,$8E,$A7,$84,$A2,$2A,$AC,$C0
;org $89A240
db $D3,$69,$8E,$A5,$AC,$D6,$BA,$43,$60,$AC,$A4,$8E,$AC,$A5,$A3,$84,$AC,$A4,$87,$84,$CB,$D6,$0C,$60,$8E,$A7,$84,$A2,$2A,$2A,$2A,$CF,$D6,$68,$43,$60,$AC,$88,$8D,$82,$A2,$84,$80,$A3,$84,$A3,$AC,$80,$A3,$AC,$A9,$8E,$A5,$CB,$82,$8E,$8B,$8B,$84,$82,$A4,$AC,$D6,$0C,$49,$84,$A7,$84,$8B,$A3,$2A,$2A,$2A,$C0
;org $89A28A
db $D3,$69,$8E,$A5,$AC,$D6,$BA,$A4,$8E,$AC,$89,$A5,$8C,$A0,$AC,$A4,$8E,$CB,$82,$8E,$8D,$A4,$88,$8D,$A5,$84,$2B,$AC,$81,$A5,$A4,$AC,$A9,$8E,$A5,$AC,$8C,$A5,$A3,$A4,$CB,$A3,$A4,$8E,$A0,$AC,$8E,$8D,$82,$84,$AC,$88,$8D,$AC,$80,$AC,$A7,$87,$88,$8B,$84,$2A,$2A,$2A,$C0
;org $89A2CB
db $D3,$64,$87,$84,$A2,$84,$AC,$80,$A2,$84,$AC,$D6,$B6,$82,$A2,$80,$82,$8A,$A3,$AC,$88,$8D,$AC,$CB,$A4,$87,$84,$AC,$60,$A9,$A2,$80,$8C,$88,$83,$2A,$AC,$47,$84,$AC,$A7,$87,$8E,$AC,$CB,$D6,$AA,$83,$8E,$A7,$8D,$AC,$8E,$8D,$AC,$A4,$87,$84,$AC,$81,$8B,$8E,$82,$8A,$AC,$CB,$D7,$65,$D6,$EF,$A3,$88,$8D,$8A,$2A,$2A,$2A,$C0
;org $89A319
db $D3,$64,$87,$88,$A3,$AC,$88,$A3,$AC,$80,$AC,$85,$88,$86,$87,$A4,$AC,$A4,$8E,$AC,$A4,$87,$84,$CB,$85,$88,$8D,$88,$A3,$87,$2A,$AC,$40,$82,$A4,$AC,$D6,$74,$A9,$8E,$A5,$CB,$80,$A2,$84,$AC,$80,$82,$A4,$84,$83,$AC,$A5,$A0,$8E,$8D,$2A,$2A,$2A,$C0
;org $89A355
db $D3,$64,$87,$84,$AC,$A3,$A4,$80,$8B,$8A,$A3,$AC,$80,$A2,$84,$AC,$82,$8E,$8D,$8D,$84,$82,$A4,$84,$83,$CB,$81,$A9,$AC,$A4,$87,$84,$AC,$D6,$C2,$8E,$85,$AC,$A4,$87,$84,$CB,$D7,$C0

;org $89A381

org $89A498
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$D6,$3C,$42,$A2,$A5,$A3,$87,$84,$A2,$4F,$4F,$AC,$CF,$D3,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$A3,$8C,$80,$A3,$87,$AC,$8E,$81,$A3,$A4,$80,$82,$8B,$84,$A3,$CB,$81,$A9,$AC,$A2,$80,$8C,$8C,$88,$8D,$86,$AC,$A4,$87,$84,$8C,$2A,$CB,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$CB,$A4,$8E,$AC,$D6,$D1,$84,$8D,$84,$A2,$86,$A9,$2A,$2A,$2A,$C0

;org $89A506

org $89A4B7
db $D3,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$A3,$8C,$80,$A3,$87,$AC,$8E,$81,$A3,$A4,$80,$82,$8B,$84,$A3,$CB,$81,$A9,$AC,$A2,$80,$8C,$8C,$88,$8D,$86,$AC,$A4,$87,$84,$8C,$2A,$CB,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$CB,$A4,$8E,$AC,$D6,$D1,$84,$8D,$84,$A2,$86,$A9,$2A,$2A,$2A,$C0

;org $89A506

org $89A525
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$D6,$3C,$45,$8B,$88,$84,$A2,$4F,$AC,$CF,$D3,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$A3,$82,$8E,$A2,$82,$87,$AC,$D6,$8C,$CB,$D6,$F0,$88,$A4,$A3,$AC,$85,$8B,$80,$8C,$84,$2A,$AC,$CB,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$D7,$02,$CB,$A4,$8E,$AC,$D6,$D1,$84,$8D,$84,$A2,$86,$A9,$2A,$2A,$2A,$AC,$C0

;org $89A584

org $89A541
db $D3,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$A3,$82,$8E,$A2,$82,$87,$AC,$D6,$8C,$CB,$D6,$F0,$88,$A4,$A3,$AC,$85,$8B,$80,$8C,$84,$2A,$AC,$CB,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$D7,$02,$CB,$A4,$8E,$AC,$D6,$D1,$84,$8D,$84,$A2,$86,$A9,$2A,$2A,$2A,$AC,$C0

;org $89A584

org $89A5A3
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$D6,$3C,$63,$8B,$88,$83,$84,$A2,$4F,$AC,$CF,$D3,$4D,$8E,$A7,$AC,$A9,$8E,$A5,$AC,$82,$80,$8D,$AC,$A5,$A3,$84,$AC,$A4,$87,$84,$CB,$63,$8B,$88,$83,$88,$8D,$86,$AC,$40,$A4,$A4,$80,$82,$8A,$2B,$AC,$80,$8D,$83,$CB,$A0,$80,$A3,$A3,$AC,$D6,$DC,$A3,$8C,$80,$8B,$8B,$CB,$A0,$80,$A3,$A3,$80,$86,$84,$A7,$80,$A9,$A3,$2A,$CF,$D6,$61,$D6,$FF,$A2,$A5,$8D,$8D,$88,$8D,$86,$2B,$CB,$A0,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$2A,$C0

;org $89A628

org $89A5C0
db $D3,$4D,$8E,$A7,$AC,$A9,$8E,$A5,$AC,$82,$80,$8D,$AC,$A5,$A3,$84,$AC,$A4,$87,$84,$CB,$63,$8B,$88,$83,$88,$8D,$86,$AC,$40,$A4,$A4,$80,$82,$8A,$2B,$AC,$80,$8D,$83,$CB,$A0,$80,$A3,$A3,$AC,$D6,$DC,$A3,$8C,$80,$8B,$8B,$CB,$A0,$80,$A3,$A3,$80,$86,$84,$A7,$80,$A9,$A3,$2A,$CF,$D6,$61,$D6,$FF,$A2,$A5,$8D,$8D,$88,$8D,$86,$2B,$CB,$A0,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$2A,$C0

;org $89A628

org $89A647
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$D7,$31,$43,$80,$A3,$87,$84,$A2,$4F,$AC,$CF,$D3,$63,$84,$8D,$83,$AC,$D6,$8C,$85,$8B,$A9,$88,$8D,$86,$AC,$81,$A9,$CB,$A3,$A0,$88,$8D,$8D,$88,$8D,$86,$AC,$D6,$FE,$81,$8E,$83,$A9,$CB,$A2,$80,$A0,$88,$83,$8B,$A9,$2A,$CF,$42,$8B,$88,$8C,$81,$AC,$87,$88,$8B,$8B,$A3,$AC,$81,$A9,$AC,$A5,$A3,$88,$8D,$86,$AC,$A4,$87,$84,$CB,$A2,$84,$82,$8E,$88,$8B,$2A,$AC,$45,$8E,$A2,$AC,$D6,$B7,$A0,$8E,$A7,$84,$A2,$2B,$CB,$A5,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$80,$8D,$83,$CB,$4B,$62,$AC,$41,$A5,$A4,$A4,$8E,$8D,$A3,$2A,$2A,$2A,$C0

;org $89A6DE

org $89A664
db $D3,$63,$84,$8D,$83,$AC,$D6,$8C,$85,$8B,$A9,$88,$8D,$86,$AC,$81,$A9,$CB,$A3,$A0,$88,$8D,$8D,$88,$8D,$86,$AC,$D6,$FE,$81,$8E,$83,$A9,$CB,$A2,$80,$A0,$88,$83,$8B,$A9,$2A,$CF,$42,$8B,$88,$8C,$81,$AC,$87,$88,$8B,$8B,$A3,$AC,$81,$A9,$AC,$A5,$A3,$88,$8D,$86,$AC,$A4,$87,$84,$CB,$A2,$84,$82,$8E,$88,$8B,$2A,$AC,$45,$8E,$A2,$AC,$D6,$B7,$A0,$8E,$A7,$84,$A2,$2B,$CB,$A5,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$80,$8D,$83,$CB,$4B,$62,$AC,$41,$A5,$A4,$A4,$8E,$8D,$A3,$2A,$2A,$2A,$C0

;org $89A6DE

org $89A6FD
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$44,$80,$A2,$A4,$87,$A1,$A5,$80,$8A,$84,$A2,$4F,$AC,$CF,$D3,$64,$87,$84,$AC,$44,$80,$A2,$A4,$87,$A1,$A5,$80,$8A,$84,$A2,$CB,$82,$80,$A5,$A3,$84,$A3,$AC,$84,$80,$A2,$A4,$87,$A1,$A5,$80,$8A,$84,$A3,$2A,$CF,$63,$A4,$8E,$A0,$A3,$AC,$D6,$8C,$85,$8E,$A2,$AC,$80,$AC,$8B,$8E,$8D,$86,$CB,$A4,$88,$8C,$84,$2A,$AC,$60,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$CB,$81,$A5,$A4,$A4,$8E,$8D,$AC,$D7,$BF,$89,$A5,$8C,$A0,$88,$8D,$86,$2A,$2A,$2A,$C0

;org $89A77F

org $89A71D
db $D3,$64,$87,$84,$AC,$44,$80,$A2,$A4,$87,$A1,$A5,$80,$8A,$84,$A2,$CB,$82,$80,$A5,$A3,$84,$A3,$AC,$84,$80,$A2,$A4,$87,$A1,$A5,$80,$8A,$84,$A3,$2A,$CF,$63,$A4,$8E,$A0,$A3,$AC,$D6,$8C,$85,$8E,$A2,$AC,$80,$AC,$8B,$8E,$8D,$86,$CB,$A4,$88,$8C,$84,$2A,$AC,$60,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$CB,$81,$A5,$A4,$A4,$8E,$8D,$AC,$D7,$BF,$89,$A5,$8C,$A0,$88,$8D,$86,$2A,$2A,$2A,$C0

;org $89A77F

org $89A79E
db $D3,$69,$8E,$A5,$AC,$A2,$84,$82,$84,$88,$A6,$84,$AC,$A4,$87,$84,$AC,$CB,$40,$A5,$A2,$80,$AC,$41,$80,$A2,$A2,$88,$84,$A2,$4F,$AC,$CF,$D3,$48,$A4,$AC,$A0,$A5,$A4,$A3,$AC,$80,$AC,$A0,$A2,$8E,$A4,$84,$82,$A4,$88,$A6,$84,$CB,$81,$80,$A2,$A2,$88,$84,$A2,$AC,$D6,$6D,$A9,$8E,$A5,$2A,$CF,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$CB,$D6,$C2,$80,$8D,$83,$AC,$A0,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$4B,$62,$CB,$D7,$03,$80,$8B,$A4,$84,$A2,$8D,$80,$A4,$84,$8B,$A9,$2A,$C0

;org $89A81B

org $89A7BF
db $D3,$48,$A4,$AC,$A0,$A5,$A4,$A3,$AC,$80,$AC,$A0,$A2,$8E,$A4,$84,$82,$A4,$88,$A6,$84,$CB,$81,$80,$A2,$A2,$88,$84,$A2,$AC,$D6,$6D,$A9,$8E,$A5,$2A,$CF,$65,$A3,$84,$AC,$A4,$87,$84,$AC,$40,$A4,$A4,$80,$82,$8A,$AC,$41,$A5,$A4,$A4,$8E,$8D,$CB,$D6,$C2,$80,$8D,$83,$AC,$A0,$A5,$A3,$87,$AC,$A4,$87,$84,$AC,$4B,$62,$CB,$D7,$03,$80,$8B,$A4,$84,$A2,$8D,$80,$A4,$84,$8B,$A9,$2A,$C0

;org $89A81B

org $89A83A
db $D3,$69,$8E,$A5,$AC,$D6,$BA,$A4,$87,$84,$AC,$40,$A5,$A2,$80,$2A,$2A,$2A,$CF,$D3,$D6,$4C,$D6,$72,$87,$80,$A3,$AC,$8D,$8E,$AC,$CB,$8C,$80,$A3,$A3,$2A,$AC,$D6,$61,$87,$84,$AC,$87,$8E,$8B,$83,$A3,$AC,$A5,$A0,$CB,$D6,$D6,$41,$80,$8B,$8B,$2B,$AC,$87,$88,$A3,$AC,$D6,$72,$CB,$81,$84,$82,$8E,$8C,$84,$A3,$AC,$D6,$A5,$A7,$80,$A4,$84,$A2,$2A,$AC,$C0

;org $89A88F

org $89A84D
db $D3,$D6,$4C,$D6,$72,$87,$80,$A3,$AC,$8D,$8E,$AC,$CB,$8C,$80,$A3,$A3,$2A,$AC,$D6,$61,$87,$84,$AC,$87,$8E,$8B,$83,$A3,$AC,$A5,$A0,$CB,$D6,$D6,$41,$80,$8B,$8B,$2B,$AC,$87,$88,$A3,$AC,$D6,$72,$CB,$81,$84,$82,$8E,$8C,$84,$A3,$AC,$D6,$A5,$A7,$80,$A4,$84,$A2,$2A,$AC,$C0

;org $89A88F

org $89A8C6
db $D3,$64,$87,$84,$AC,$63,$A0,$88,$83,$84,$A2,$AC,$A3,$A0,$88,$8D,$A3,$AC,$80,$AC,$A7,$84,$81,$AC,$CB,$D6,$8E,$A3,$A4,$80,$8B,$8A,$AC,$A4,$8E,$AC,$A3,$A4,$80,$8B,$8A,$2A,$AC,$48,$85,$AC,$CB,$A9,$8E,$A5,$AC,$D6,$82,$D6,$98,$80,$AC,$A7,$84,$81,$2B,$AC,$CB,$A9,$8E,$A5,$AC,$82,$80,$8D,$AC,$85,$8B,$A9,$2A,$2A,$2A,$AC,$C0

;org $89A915
db $15,$00,$20
ECDandelionFirstMeet:



org $89AA02
db $D3,$C2,$02,$D7,$15,$D6,$62,$80,$A2,$84,$AC,$A9,$8E,$A5,$AC,$83,$8E,$88,$8D,$86,$4F,$4F,$C3,$00,$C0
;org $89AA1B
db $D3,$C2,$02,$D6,$09,$87,$84,$A2,$84,$2B,$AC,$8E,$A2,$AC,$A4,$87,$84,$CB,$83,$84,$8C,$8E,$8D,$AC,$D6,$EF,$86,$84,$A4,$AC,$A9,$8E,$A5,$4F,$C3,$00,$C0

;org $89AA40
db $15,$00,$10
ECDandelionFinal:
cop #$D0 : db $DF,$01 : dw .Die    ; $AA6C
cop #$CC : db $DF
cop #$88 : dl $8EE000
cop #$84 : db $33,$02
cop #$8A
lda #$0048 : sta $7F0018,x
lda #$0050 : sta $7F001A,x
cop #$52 : db $33,$02
cop #$53
.Die:
cop #$E0


;org $89AA6E
db $00,$10,$01
EApocalypseGaia: ; warning: I think some bytes are missing here...
{
; Apocalypse Core.
; Entry point.
{
lda #$8011                   ; Boilerplate from here...
tsb $12                      ;
lda $14                      ;
sec                          ;
sbc #$0008                   ;
sta $14                      ;   ...to here.
lda $16                      ; Set InitialY to be
clc                          ;   1 full screen below
adc #$0100                   ;   what the event table requested.
sta $16                      ;   We'll scroll onto the screen later.
lda #$0000                   ; Zero camera position.
sta $06BE                    ;   ^
sta $06C2                    ;   ^
sta $06C0                    ;   ^
sta $06C4                    ;   ^
	; Palette event -- Colors of the End
cop #$9C : db $19,$B7,$89,$00,$23    ;[Child: $89B719] 
	; Palette event -- Broken, reparable.
cop #$9C : db $FC,$B6,$89,$00,$23    ;[Child: $89B6FC] 
	; Floor Beam Spawner, animation broken.
cop #$9C : db $47,$B7,$89,$00,$23    ;[Child: $89B747] 
	; Apocalypse Brain. Scrolls us onto the screen and then hovers us.
cop #$A1 : db $C7,$B5,$89,$00,$20    ;[Child: $89B5C7] 
	; Bits on the left and right sides.
	; When they die, they inform the Core by LSR'ing its $24.
cop #$A4 : db $0E,$B3,$89,$C8,$33,$11,$01    ;[Child: $89B30E] 
cop #$A4 : db $6A,$B3,$89,$38,$33,$11,$01    ;[Child: $89B36A] 
	; Launchers.
cop #$A4 : db $86,$B5,$89,$BF,$0B,$01,$03    ;[Child: $89B586] 
cop #$A4 : db $7F,$B5,$89,$41,$0B,$01,$03    ;[Child: $89B57F] 
    ; Event order is now Brain->Core->LaunchR->LaunchL->BitR->BitL->Harass->Broken->Colors
stz $24                      ; Zero internal variable.
cop #$80 : db $00                 ; Sprite $00,
cop #$89                     ;  animate until finished.
cop #$C1                     ; Event pointer here.
lda $24                      ; Sleep until $24 is nonzero.
bne +$01                     ;[$89AAE3] 
rtl                          ;

; Apocalypse Core after the Brain sets $24 > 0
;   (indicating that we've successfully scrolled onto the screen).
; Main P1 routine is $ab02 - $ab6a.
lda #$0100                   ;
trb $10                      ; Enable collision with player.
lda #$0003                   ;
sta $0000                    ; Loop 4 times.
ldy $06                      ; The triggered Core clears flag #$0100
lda $0010,y                  ;   in the Launchers and Bits
and #$FEFF                   ;   to make them collide with the Player.
sta $0010,y                  ;
lda $0006,y                  ;
tay                          ;
dec $0000                    ;
bpl +$EE (-$12)              ;[$89AAF0] ; Loop end.
ldy $06                      ; Loop start. Main P1 routine.
lda #$B58E                   ; Set the Launcher
sta $0000,y                  ;  event pointers to $89b58e.
lda $0006,y                  ;
tay                          ;
lda #$B58E                   ;
sta $0000,y                  ;
lda #$021C                   ;
sta $7F0000,x                ; And start a timer for #$021C frames.
cop #$C1                     ;
lda $24                      ; If something makes $24 zero again,
beq +$4B                     ;[$89AB6C] ; the Core branches to $ab6c.
lda $7F0000,x                ; Otherwise it keeps counting down.
dec a                        ;
sta $7F0000,x                ; If the Core's timer hasn't run out,
bmi +$01                     ;[$89AB2D] ; the Core does nothing else.
rtl                          ; But if the Core's timer does run out...
ldy $06                      ; (LauncherR)
lda $0006,y                  ; (LauncherL)
tay                          ; ...
lda $0006,y                  ; (BitR)
tay                          ; ...
lda $0026,y                  ; If BitR.$26 == 0,
bne +$06                     ;[$89AB42] 
lda #$B37A                   ; then
sta $0000,y                  ;   set its pointer to $89b37a.
lda $0006,y                  ; (BitL)
tay                          ;
lda $0026,y                  ; If BitL.$26 == 0,
bne +$06                     ;[$89AB51] 
lda #$B31E                   ; then
sta $0000,y                  ;   set its pointer to $89b31e.
lda #$00B4                   ; Start a new timer for #$B4 frames.
sta $7F0000,x                ;
cop #$C1                     ;
lda $24                      ; Continue listening for $24 going back to 0,
beq +$0E                     ;[$89AB6C] ; and branch to $ab6c if it does.
lda $7F0000,x                ;
dec a                        ;
sta $7F0000,x                ; Otherwise just count down the timer
bmi +$01                     ;[$89AB6A] ; and do nothing else.
rtl                          ; When the timer does run out, go back
bra +$96 (-$6A)              ;[$89AB02] ; to set the Launcher pointers again.
; End P1 routine.

; Apocalypse Core P2.
; The Core branches here after the Bits die, indicated by $24
;   being set to 0.
cop #$80 : db $03                 ; Animate sprite $03.
cop #$89                     ;
cop #$57 : db $F5,$AB,$89         ;[Delayed: $89ABF5] ; Death pointer.
cop #$A5 : db $BE,$B9,$89,$00,$00,$00,$20    ;[Child: $89B9BE] ; Palette shift.
lda #$0010                   ;
trb $10                      ; Become vulnerable.
cop #$DA : db $1D                 ; Wait #$1E frames.
cop #$58 : db $EE,$AB             ;[$89ABEE] ; Damage pointer.
cop #$80 : db $01                 ; Animate sprite $01,
cop #$89                     ;
cop #$80 : db $02                 ; then $02.
cop #$89                     ;
cop #$07 : db $29                 ; Sound.
cop #$A5 : db $B6,$B8,$89,$00,$00,$02,$02    ;[Child: $89B8B6] ; Nuke.
cop #$80 : db $19                 ; Animate sprite $19.
cop #$89                     ;
cop #$A5 : db $C5,$B9,$89,$00,$00,$00,$20    ;[Child: $89B9C5] ; Nuke palette shift.
cop #$58 : db $00,$00             ; Clear damage pointer.
cop #$DB : db $B3,$00             ; Delay.
lda #$0010                   ;
tsb $10                      ; Become invulnerable.
ldy $06                      ; (LauncherR)
lda #$B5AD                   ;
sta $0000,y                  ; Set LauncherR pointer to $89B5AD, Spawn Chaser Orb.
lda $0006,y                  ; (LauncherL)
tay                          ;
lda #$B5AD                   ;
sta $0000,y                  ; Set LauncherL pointer to $89B5AD, Spawn Chaser Orb.
ldy $06                      ; (LauncherR)
lda $0006,y                  ; (LauncherL)
tay                          ;
lda $0006,y                  ; (BitR)
tay                          ;
lda #$B3EA                   ;
sta $0000,y                  ; Set BitR pointer to $89B3EA, Rain of Fire sequence.
lda $0006,y                  ; (BitL)
tay                          ;
lda #$B3EA                   ;
sta $0000,y                  ; Set BitL pointer to $89B3EA, Rain of Fire sequence.
cop #$DB : db $DF,$01             ; Delay.
bra +$88 (-$78)              ;[$89AB76] ; New palette shift and vulnerability loop.
; End P2 main loop.

; Apocalypse Core P2, damage pointer during the main loop.
; If the Core P2 is hit in the animation sequence $01-$02-$19,
;   then $03 is animated and the sequence resets.
; How/whether this works in practice depends entirely on how long
;   the animation sequences were meant to be...
cop #$80 : db $03                 ; Animate sprite $03,
cop #$89                     ;   then return to top
bra +$96 (-$6A)              ;[$89AB8B] ; of animation sequence.
; End P2 damage pointer.

; Apocalypse Core P2, death pointer.
cop #$A5 : db $C5,$B9,$89,$00,$00,$00,$20    ;[Child: $89B9C5] Delayed ; Palette shift.
cop #$80 : db $04                 ; Animate $04.
cop #$89                     ;
ldy $04                      ; (Brain)
lda #$B6A6                   ;
sta $0000,y                  ; Set Brain's pointer to $89B6A6, downward scroll.
lda #$0001                   ;
sta $26                      ; Set $26 to a nonzero value,
cop #$C1                     ;   then set the event pointer here.
lda $26                      ; The Brain will inform us that the scroll is complete
beq +$01                     ;[$89AC17] ; by setting $26 to 0.
rtl                          ;   Until then, we sleep.
lda #$FFF0                   ; Meant to disable joypad while the Final Core rises,
tsb $065A                    ;   but it's broken because it's undone in the same frame.
cop #$CC : db $F5                 ; Set flag $F5, I guess.
cop #$4F : db $00,$E0,$7E,$00,$50,$00,$08    ; Extremely broken. This sequence tries
cop #$4F : db $00,$E8,$7E,$00,$54,$00,$08    ;   to load a new set of monster sprite tiles
cop #$4F : db $00,$F0,$7E,$00,$58,$00,$08    ;   for the Final Core, but the data and
cop #$4F : db $00,$F8,$7E,$00,$5C,$00,$08    ;   animations are all gone.
lda #$FFF0                   ; Meant to re-enable joypad buttons.
trb $065A                    ;
cop #$A5 : db $55,$AC,$89,$00,$00,$12,$00    ;[Child: $89AC55] ; Create the Final Core.
cop #$E0                     ; Die and kill Launchers, Bits, Harasser, and Palettes.
; End Apocalypse Core P2 death pointer.
} ; End of Apocalypse Core P1 and P2 code. Only the Final Core remains.


; Final Core.
cop #$57 : db $D5,$B1,$89         ;[Delayed: $89B1D5] Child ; Death pointer.
lda #$AD4C                   ;
sta $7F0020,x                ; Vital data is at $81AD4C.
lda $AD4C                    ;
and #$00FF                   ; Set HP to whatever's there.
sta $7F0026,x                ;   (Need to change this in production.)
cop #$B6 : db $30                 ; Set above all BGs. Then create Left and Right
cop #$A4 : db $B3,$AD,$89,$EA,$E0,$00,$22    ;[Child: $89ADB3] ; Helpers. (No sprites,
cop #$A4 : db $EB,$AD,$89,$16,$E0,$00,$22    ;[Child: $89ADEB] ;  so no mirrors.)
cop #$80 : db $1E                 ; Sprite $1E and update.
cop #$89                     ;
lda #$0080                   ;
sta $7F0018,x                ; Using COP #$52/#$53, so this moves to $80/$80
sta $7F001A,x                ;   (middle of the screen) 
cop #$52 : db $1E,$FF,$FF         ;   with sprite $1E and "slow" speed.
cop #$53                     ;
cop #$84 : db $1E,$04             ; Then animate sprite $1E 4 times.
cop #$8A                     ;
lda #$0010                   ; Clear invincible flag; also starts Cannons' attacks
trb $10                      ;   and motion, since they check this value.
cop #$58 : db $11,$AD             ;[$89AD11] ; Damage pointer. Code resets to here after
cop #$C1                     ;   Left Helper Spawn's attack, and also this loop.
lda $0036                    ;
lsr a                        ;
bcs +$11                     ;[$89ACBF] ; Parity of frame determines next target.
lda $09AA                    ; {BUG! Should be LDY.} If even parity,
lda $0014,y                  ;   get player's x/y coordinates
sta $0018                    ;   into Low$0018/$001C.
lda $0016,y                  ;
sta $001C                    ;
bra +$0E                     ;[$89ACCD] 
cop #$23                     ;<--Branch
sta $0018                    ; If odd parity, put random bytes
lda $0411                    ;   (namely $0410 and $0411)
and #$00FF                   ;   into Low$0018/$001C.
sta $001C                    ;
cop #$23                     ;<--Branch
and #$003F                   ;
sec                          ;
sbc #$001F                   ;
clc                          ;
adc $0018                    ; Then add rand(-$1F,+$1F) or so to Low$0018.
cmp #$0020                   ; If this target is within 2 tiles of the left wall,
bcs +$01                     ;[$89ACE0] ;   fail this check
rtl                          ;   and try again next frame.
cmp #$00E0                   ; Likewise if it's within 2 tiles of the right wall,
bcc +$01                     ;[$89ACE6] ;   fail this check
rtl                          ;   and try again next frame.
sta $7F0018,x                ; Got an x-target within $20,$E0.
lda $0411                    ; Do the same for the y-target, but this time...
and #$003F                   ;
sec                          ;
sbc #$001F                   ;
clc                          ;
adc $001C                    ;
cmp #$0040                   ;   ...must be at least 4 tiles away from the top,
bcs +$01                     ;[$89ACFE] 
rtl                          ;
cmp #$00E0                   ;   and still at least 2 tiles away from the bottom.
bcc +$01                     ;[$89AD04] 
rtl                          ;
sta $7F001A,x                ; We've found a suitable target.
cop #$52 : db $1E,$FF,$FF         ; Lumber over there with sprite $1E.
cop #$53                     ;
bra +$91 (-$6F)              ;[$89ACA2] ; Reset damage pointer, frame parity loop again.

; Final Core damage pointer.
lda #$0001                   ;<--Delayed 
sta $26                      ; Mark self as damaged.
cop #$80 : db $42                 ; Animate sprite $42,
cop #$89                     ;
cop #$80 : db $1F                 ; then sprite $1F,
cop #$89                     ;
cop #$80 : db $20                 ; then sprite $20.
cop #$89                     ;
cop #$A5 : db $3F,$AD,$89,$00,$EC,$11,$02    ;[Child: $89AD3F] ; Spawn a mini.
cop #$80 : db $21                 ; Then animate sprite $21.
cop #$89                     ;
stz $26                      ; Finally mark self as undamaged.
jmp $ACA2                    ;[$89ACA2] ; And return to regular loop.

; FCore idle animation triggered by Left Helper Spawn's DirToPlayer attack.
cop #$80 : db $1E
cop #$89
bra +$F9 (-$07)              ;[$89AD38]

; Final Core Minis, created by the Final Core when it's damaged.
cop #$57 : db $A7,$AD,$89         ;[Delayed: $89ADA7] Child ; Death pointer. (Just an animation.)
cop #$5B : db $80,$00             ; Might mean "enable death & damage pointers".
cop #$86 : db $22,$10,$07         ; Sprite $22, vertical movement $07, $10 times.
cop #$8A                     ;
cop #$DA : db $13                 ; Wait $14 frames,
cop #$80 : db $23                 ;   then switch to sprite $23.
cop #$89                     ;
lda #$0210                   ;
trb $10                      ; Unknown purposes.
lda #$AD48                   ;
sta $7F0020,x                ; New vital data: $81ad48.
lda $AD48                    ;
and #$00FF                   ;
sta $7F0026,x                ; New HP: value at $81ad48.
cop #$58 : db $A0,$AD             ;[$89ADA0] ; Damage pointer. Loop start.
cop #$C1                     ;
cop #$23                     ; Random x target.
cmp #$0014                   ;   Must be at least 1.25 tiles from left wall,
bcs +$01                     ;[$89AD7B] 
rtl                          ;
cmp #$00E0                   ;   and 2 tiles from right wall.
bcc +$01                     ;[$89AD81] 
rtl                          ;
sta $7F0018,x                ;
cop #$23                     ; Likewise random y target.
cmp #$0014                   ;   Must be at least 1.25 tiles from top,
bcs +$01                     ;[$89AD8D] 
rtl                          ;
cmp #$00E0                   ;   and 2 from bottom.
bcc +$01                     ;[$89AD93] 
rtl                          ;
sta $7F001A,x                ;
cop #$52 : db $24,$02,$FF         ; Got a target. Animate sprite $24, at 2 px/frame.
cop #$53                     ;
bra +$CD (-$33)              ;[$89AD6D] ; Then back to loop start.

; Final Core Minis' damage pointer.
cop #$80 : db $25                 ; Animate sprite $25.
cop #$89                     ;
bra +$C6 (-$3A)              ;[$89AD6D] ; Then back to loop start.

; Final Core Minis' death pointer.
cop #$80 : db $26                 ;<--Delayed ; Animate sprite $26,
cop #$89                     ;
cop #$80 : db $27                 ; then sprite $27,
cop #$89                     ;
cop #$E0                     ; then die.


; Helpers to the Final Core. (Arms, perhaps...)
; This is a confusing mess, and it's made worse by the fact that the in-game behavior
;   depends on the choice of sprites.
; What should happen, as far as I can tell, is that each Helper is a fixed anchor
;   point #$16 px to the left or right of the Core, and follows it as it flies.
; Each Cannon should spiral (or circle?) around its corresponding Helper at
;   a distance of #$50 px, with some randomness in the motion built in.
; Between the Cannon and the anchor point are five connectors with the same sprite
;   that do nothing but evenly distribute themselves along the line between the two.
; In principle, that means the Final Core should rise from the Comet with its arms
;   spread from x=#1A to x=#$E6, and the arms proceed to flail around like that,
;   with the Player trying not to get hit by either the body parts of the Bullets.
; What I don't understand is why with some sprites the parts seem to get stuck
;   in the ground, or too close to the Core.
; Some observations: Helpers, Tendons, Joints, Roots don't use the engine mover; they
;   manually set their position based on the previous and following objects. So
;   they can't get "stuck" or end up in the wrong place.
; So a reasonable guess about the culprit is the Cannon, which itself fixes the endpoint
;   of the arm and thus the positions of the body parts. There are probably two
;   independent problems to work out. One is that the Cannon is an animated mover, so
;   its animations affect how long each action sequence takes. The other is some
;   overloading of the trig functions and tables that drive spiral/circular motion;
;   they're used for many different purposes, and it seems more than likely that some
;   confusion over inputs and outputs led to misuse of the trig routines.
; After a little more investigation, the use of trig functions is basically sound,
;   though $80f3c9 unfortunately swaps sine and cosine (but see a few lines down...).
; I do find, though, that the Cannons hard-code $7F:12 = #$70, which means they
;   will always be #$38 px (3.5 tiles) away from their corresponding Helper.
; And finally, after some more digging, I've found that the trig functions here and
;   elsewhere implicitly treat "north" as Theta=0, which explains the mixup of sine
;   and cosine in $80f3c9. Now I just have to check every trig interaction in this
;   code to make sure it's all in agreement about which direction is 0 degrees and
;   also which spiral direction is positive angles. Also, switching the Cannons to
;   sprites with animations allows them to come on-screen and fire.
{
; Left Helper to the Final Core.
; Creates a Cannon and five body parts in a line to its left,
;   then continues to common Helper code.
cop #$A4 : db $52,$AE,$89,$B0,$00,$02,$02    ;[Child: $89AE52] Child ; Left Helper Cannon.
cop #$A4 : db $AE,$B2,$89,$C0,$00,$02,$02    ;[Child: $89B2AE] ; Tendon.
cop #$A4 : db $8D,$B2,$89,$D0,$00,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $8D,$B2,$89,$E0,$00,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $8D,$B2,$89,$F0,$00,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $9B,$B2,$89,$00,$00,$02,$02    ;[Child: $89B29B] ; Root.
bra +$36                     ;[$89AE21] 

; Right Helper to the Final Core.
; Creates a Cannon and five body parts in a line to its right (offset down by #$20 px),
;   then continues to common Helper code.
cop #$A4 : db $47,$B1,$89,$50,$E0,$02,$02    ;[Child: $89B147] Child ; Right Helper Cannon.
cop #$A4 : db $AE,$B2,$89,$40,$E0,$02,$02    ;[Child: $89B2AE] ; Tendon.
cop #$A4 : db $8D,$B2,$89,$30,$E0,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $8D,$B2,$89,$20,$E0,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $8D,$B2,$89,$10,$E0,$02,$02    ;[Child: $89B28D] ; Joint.
cop #$A4 : db $9B,$B2,$89,$00,$E0,$02,$02    ;[Child: $89B29B] ; Root.

; Both Helpers then run this code.
lda $14                      ;
ldy $24                      ; (FCore)
sec                          ;
sbc $0014,y                  ;
sta $7F100C,x                ; Store HelperX - FCoreX,
lda $16                      ;
ldy $24                      ;
sec                          ;
sbc $0016,y                  ;
sta $7F100E,x                ;   likewise HelperY - FCoreY.
cop #$C1                     ; Then set event pointer here.
ldy $24                      ; This loop keeps the Helper at a fixed
lda $0014,y                  ;   displacement from the FCore
clc                          ;   by setting
adc $7F100C,x                ;   x = (initHelperX-initFCoreX) + currentFCoreX,
sta $14                      ;
lda $0016,y                  ;
clc                          ;
adc $7F100E,x                ;
sta $16                      ;   and likewise for y.
rtl                          ; Loop end; do it again next frame.
} ; End of Helpers to the Final Core.

; Cannon of Left Helper. Fires Bullets.
{
cop #$8D : db $29                 ;Child ; New sprite $29, and update properties.
lda #$0000                   ;
sta $7F0010,x                ; Initialize $7F:10 (angle) to 0, which should be
lda #$0070                   ;   north and increasing clockwise.
sta $7F0012,x                ; Initialize $7F:12 (2 * radius) to #$70.
cop #$C1                     ; Then start the first main loop.
lda $7F001C,x                ; Loads parent, FCore (Helper is a sibling).
tay                          ;
lda $0010,y                  ;
bit #$0010                   ; Check whether FCore is invulnerable.
beq +$04                     ;[$89AE76] ; If so,
jsr $B255                    ;[$89B255] ;   just spiral around the Helper,
rtl                          ;   then sleep for this frame. If vulnerable,
cop #$C6 : db $76,$AE             ;[$89AE76] ; Set Saved Jump Address here instead.
cop #$2D                     ; Find direction to player.
phx                          ; Push ThisID for storage.
and #$0007                   ; 
sta $0000                    ;
tax                          ; Set .X = DirToPlayer. It indexes an angle s.t. if
lda $89B25C,x                ;   Player is SOUTH of us, Theta=$00, increasing CCW.
plx                          ; Restore .X = ThisID.
and #$00FF                   ;
sta $7F100C,x                ; Store AngleToPlayer.
sep #$20                     ; (If Player is in the WNW half, result is negative;
sec                          ;   in the ESE half, result is positive.)
sbc $7F0010,x                ; Subtract $7F:10 (initialized to 0) from that.
rep #$20                     ;
bpl +$2F                     ;[$89AECA] ; If result < #$80, jump way down there.
ldy $24                      ; If result was >= #$80, load LeftHelper as spiral
jsl $80F3C9                  ;[$80F3C9] ; center, then do spiral motion.
jsr $B274                    ;[$89B274] ; Set sprite based on $7F:10.
cop #$8D : db $FF                 ; Reset sprite, needed since index just changed.
cop #$C2                     ; Delay 1 frame.
lda $7F0010,x                ; $7F:10 is an angle offset for DirToPlayer
clc                          ;   that allows the Cannon to spiral around
adc #$0002                   ;   the Helper in a more chaotic way.
and #$00FF
sta $7F0010,x                ; $7F:10 += 2.
sec                          ; Sometimes we'll find abs($7F:10 - cos(...)) >= 3.
sbc $7F100C,x
bpl +$04                     ;[$89AEC3]
eor #$FFFF
inc a
cmp #$0003
bcs +$D3 (-$2D)              ;[$89AE9B] ; In that case, just do spiral motion.
bra +$AC (-$54)              ;[$89AE76] ; Otherwise, refresh DirToPlayer.
and #$00FF                   ; Getting here might mean player is across from Cannon.
cmp #$0010                   ; This might mean player is directly across,
bcc +$30                     ;[$89AF02] ; in which case we jump ahead again.
ldy $24                      ; If player is across but not directly,
jsl $80F3C9                  ;[$80F3C9] ; do spiral motion,
jsr $B274                    ;[$89B274] ; set sprite based on DirToPlayer,
cop #$8D : db $FF                 ; reset sprite,
cop #$C2                     ; and delay one frame.
lda $7F0010,x
sec
sbc #$0002
and #$00FF
sta $7F0010,x                ; Then do $7F:10 -= 2 (spiral other way),
sec
sbc $7F100C,x                ; and repeat all of the procedure above
bpl +$04                     ;[$89AEFA] ; for processing the cosine.
eor #$FFFF                   ;
inc a
cmp #$0003                   ; If the new adjusted angle difference is large,
bcs +$CB (-$35)              ;[$89AECA] ; just keep spiraling.
jmp $AE76                    ;[$89AE76] ; If small, refresh DirToPlayer and start over.
} ; End of Left Helper Cannon code.

; Common code to both Helper Cannons.
; The Left Cannon fires if it's directly across from the Player(?).
; The Right Cannon has a chance of firing during every main loop.
; Use of the top 3 bits of $7F:10 to set a direction is buggy, since they
;   don't change often enough to be interesting. I'll fix this later.
{
lda $7F0010,x                ; Load angle modifier as the Bullet's direction seed.
lsr a                        ;
lsr a                        ;
lsr a                        ;
lsr a                        ;
lsr a                        ;
phx                          ;
tax                          ; Set .X = top three bits of angle modifier,
lda $89B26C,x                ;   then load 4 - .X mod 8,
plx                          ;
and #$00FF                   ;
sta $0000                    ;   and store in Low$0000.
lda $0410                    ; Low bit of last random number
and #$0001                   ;   shifts Low$0000 by either 0 or -1,
sec                          ;   so the range of Low$0000 is 0..7 half
sbc #$0001                   ;   the time, -1..6 the other half.
clc                          ;   (Or something like that...)
adc $0000                    ;
and #$0007                   ;
sta $0000                    ;
cop #$D9 : db $00,$00,$32,$AF     ; 8-way branch on angle modifier value.
	[$89AF42] [$89AF66] [$89AF8A] [$89AFAE]
	[$89AFD2] [$89AFF6] [$89B01A] [$89B03E]
; The 8-way branch from COP #$D9 goes to one of the following.
; The use of space here is very inefficient: only the Cannon's sprite and the fired
;   Bullet are different between different branches.
cop #$8D : db $2A                 ;<--Branch 0 ; Sprite $2A and update.
jsr $B084                    ;[$89B084] ; Set new idle animation on FCore.
cop #$CA : db $10                 ; Loop start.
jsr $B255                    ;[$89B255] ; Do spiral around FCore.
cop #$CB                     ; Loop end.
cop #$A5 : db $A6,$B0,$89,$00,$F8,$02,$02    ;[Child: $89B0A6] ; Fire Bullet $B0A6.
cop #$CA : db $0A                 ; Loop start.
jsr $B255                    ;[$89B255] ; Do spiral around FCore.
cop #$CB                     ; Loop end.
jsr $B062                    ;[$89B062] ; Restart FCore's main loop.
cop #$C5                     ; Return to Cannon's main loop, $89AE76.

cop #$8D : db $2F                 ;<--Branch 1 ; Sprite $2F and update.
jsr $B084                    ;[$89B084] 
cop #$CA : db $10                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
cop #$A5 : db $B8,$B0,$89,$08,$F8,$02,$02    ;[Child: $89B0B8] ; Fire Bullet $B0B8.
cop #$CA : db $0A                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
jsr $B062                    ;[$89B062] 
cop #$C5                     ;

cop #$8D : db $2C                 ;<--Branch 2 ; Sprite $2C and update.
jsr $B084                    ;[$89B084] 
cop #$CA : db $10                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
cop #$A5 : db $CA,$B0,$89,$08,$00,$02,$02    ;[Child: $89B0CA] ; Fire Bullet $B0CA.
cop #$CA : db $0A                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
jsr $B062                    ;[$89B062] 
cop #$C5                     ;

cop #$8D : db $30                 ;<--Branch 3 ; Sprite $30 and update.
jsr $B084                    ;[$89B084] 
cop #$CA : db $10                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
cop #$A5 : db $DC,$B0,$89,$08,$08,$02,$02    ;[Child: $89B0DC] ; Fire Bullet $B0DC.
cop #$CA : db $0A                 ;
jsr $B255                    ;[$89B255] 
cop #$CB                     ;
jsr $B062                    ;[$89B062] 
cop #$C5                     ;

cop #$8D : db $29                 ;<--Branch 4 ; Sprite $29 and update.
jsr $B084                    ;[$89B084]
cop #$CA : db $10
jsr $B255                    ;[$89B255]
cop #$CB
cop #$A5 : db $EE,$B0,$89,$00,$08,$02,$02    ;[Child: $89B0EE] ; Fire Bullet $B0EE.
cop #$CA : db $0A
jsr $B255                    ;[$89B255]
cop #$CB
jsr $B062                    ;[$89B062]
cop #$C5

cop #$8D : db $2D                 ;<--Branch 5 ; Sprite $2D and update.
jsr $B084                    ;[$89B084]
cop #$CA : db $10
jsr $B255                    ;[$89B255]
cop #$CB
cop #$A5 : db $FF,$B0,$89,$F8,$08,$02,$02    ;[Child: $89B0FF] ; Fire Bullet $B0FF.
cop #$CA : db $0A
jsr $B255                    ;[$89B255]
cop #$CB
jsr $B062                    ;[$89B062]
cop #$C5

cop #$8D : db $2B                 ;<--Branch 6 ; Sprite $2B and update.
jsr $B084                    ;[$89B084]
cop #$CA : db $10
jsr $B255                    ;[$89B255]
cop #$CB
cop #$A5 : db $10,$B1,$89,$F8,$00,$02,$02    ;[Child: $89B110] ; Fire Bullet $B110.
cop #$CA : db $0A
jsr $B255                    ;[$89B255]
cop #$CB
jsr $B062                    ;[$89B062]
cop #$C5

cop #$8D : db $2E                 ;<--Branch 7 ; Sprite $2E and update.
jsr $B084                    ;[$89B084]
cop #$CA : db $10
jsr $B255                    ;[$89B255]
cop #$CB
cop #$A5 : db $21,$B1,$89,$F8,$F8,$02,$02    ;[Child: $89B121] ; Fire Bullet $B121.
cop #$CA : db $0A
jsr $B255                    ;[$89B255]
cop #$CB
jsr $B062                    ;[$89B062]
cop #$C5


; SR called by Helper Cannons after their attacks.
; Restores and restarts FCore's idle loop by
;   changing its event pointer to $89ACA2.
; (No comments because this is mostly identical to $B084 below it.)
lda $7F001C,x                ;<--SR
tay
lda $0026,y
bne +$16                     ;[$89B082]
lda $0010,y
bit #$0040
bne +$0E                     ;[$89B082]
lda #$ACA2
sta $0000,y
lda #$0000
sta $0008,y
clc
rts
sec                          ;<--Branch
rts

; SR called by Helper Cannons when starting their attacks.
; Sets a new idle animation on FCore by 
;   changing its event pointer to $89AD38.
lda $7F001C,x                ;(FCore)
tay                          ;
lda $0026,y                  ; If FCore is in its damage animation, SEC and return.
bne +$16                     ;[$89B0A4] ; But if FCore is normal, continue.
lda $0010,y                  ;
bit #$0040                   ; If FCore is invulnerable, SEC and return.
bne +$0E                     ;[$89B0A4] ; If vulnerable, continue.
lda #$AD38                   ; Set FCore's event pointer to $89AD38
sta $0000,y                  ;  (which just loops a new idle animation),
lda #$0000                   ;  set FCore.$08 to 0 so it acts immediately,
sta $0008,y                  ;  then CLC and return.
clc                          ;
rts                          ;[$89AF4E] 
sec                          ;
rts                          ;[$89AF48] 
} ; End of Helper Cannon code.

; Helper Cannon Bullets.
; The Helper Cannons fire one of these based on DirToPlayer and
;   some other variables too. There are eight possibilities, but only
;   the sprites and initial move patterns differ between them.
{
cop #$07 : db $23                 ;<--Child ; Play a sound.
cop #$80 : db $33                 ; Sprite $33 and animate.
cop #$89                     ;
cop #$8D : db $3B                 ; Sprite $3B and update.
cop #$AC : db $00,$08             ; Current and saved x,y movement = $00,$08.
jmp $B134                    ;[$89B134] 

cop #$07 : db $23                 ;<--Child
cop #$80 : db $38                 ; Sprite $38 and animate.
cop #$89                     ;
cop #$8D : db $40                 ; Sprite $40 and update.
cop #$AC : db $05,$06             ;
jmp $B134                    ;[$89B134] 

cop #$07 : db $23                 ;<--Child
cop #$80 : db $35                 ; Sprite $35 and animate.
cop #$89                     ;
cop #$8D : db $3D                 ; Sprite $3D and update.
cop #$AC : db $07,$00             ;
jmp $B134                    ;[$89B134] 

cop #$07 : db $23                 ;<--Child
cop #$80 : db $39                 ; Sprite $39 and animate.
cop #$89                     ;
cop #$8D : db $41                 ; Sprite $41 and update.
cop #$AC : db $05,$05             ;
jmp $B134                    ;[$89B134] 

cop #$07 : db $23                 ;<--Child
cop #$80 : db $32                 ; Sprite $32 and animate.
cop #$89
cop #$8D : db $3A                 ; Sprite $3A and update.
cop #$AC : db $00,$07
bra +$35                     ;[$89B134]

cop #$07 : db $23                 ;<--Child
cop #$80 : db $36                 ; Sprite $36 and animate.
cop #$89
cop #$8D : db $3E                 ; Sprite $3E and update.
cop #$AC : db $06,$05
bra +$24                     ;[$89B134]

cop #$07 : db $23                 ;<--Child
cop #$80 : db $34                 ; Sprite $34 and animate.
cop #$89
cop #$8D : db $3C                 ; Sprite $3C and update.
cop #$AC : db $08,$00
bra +$13                     ;[$89B134]

cop #$07 : db $23                 ;<--Child
cop #$80 : db $37                 ; Sprite $37 and animate.
cop #$89
cop #$8D : db $3F                 ; Sprite $3F and update.
cop #$AC : db $06,$06
bra +$02                     ;[$89B134]

cop #$B1                     ;<--Branch ; Load saved movement, i.e. move again.
cop #$C1                     ; All Bullets converge here.
cop #$89                     ; Do movement.
lda $10                      ;
bit #$4000                   ; Off-screen flag. Continue moving
beq +$F3 (-$0D)              ;[$89B132] ; until event goes off-screen.
cop #$B1                     ; One more cycle of load movement,
cop #$C1                     ;   set pointer,
cop #$89                     ;   move. Perhaps ensures entire sprite is off-screen.
cop #$E0                     ; Die.
} ; End Helper Cannon Bullets.

; Right Helper Cannon.
; Spirals around the Final Core. Every main loop, it has a 50% chance of
;   firing a Bullet in a quasi-random direction. Otherwise it spirals
;   for a random number of frames and changes its Bullet direction.
; The Bullet direction randomizer is broken. Bullets use the top 3 bits
;   of the angle modifier, but those will nearly always be 000.
; I'll fix this in both Helpers later.
{
cop #$8D : db $29                 ;<--Child ; Sprite $29 and update.
lda #$0000                   ; Similar boilerplate to Left Helper's Cannon:
sta $7F0010,x                ;  | init position modifier (slightly broken),
lda #$0070                   ;  |
sta $7F0012,x                ;  | init spiral's 2 * radius to #$70,
cop #$C1                     ;  |
lda $7F001C,x                ;  | check whether Final Core is invulnerable
tay                          ;  |
lda $0010,y                  ;  |
bit #$0010                   ;  |
beq +$04                     ;[$89B16B] ; |
jsr $B255                    ;[$89B255] ; and loop if so.
rtl                          ;  < Then boilerplate ends.
cop #$C6 : db $6B,$B1             ;[$89B16B] ; Set Saved Jump Address (loop start) here.
lda $0410                    ;
lsr a                        ; If low bit of random number is 1, continue here.
bcs +$06                     ;[$89B17B] ; If 0, jump back to earlier Fire Bullet
jmp $AF02                    ;[$89AF02] ;   code (i.e. 50% chance of this per loop).
cop #$8D : db $29                 ;<--Branch ; Sprite $29 and update.
cop #$23                     ; Re-seed RNG. (Start here in 50% of main loops.)
sta $7F100C,x                ; Save the new random number.
lda $0036                    ;
lsr a                        ; 50/50 branch on parity of frame counter.
bcc +$27                     ;[$89B1AE] ; If 0, branch; if 1, continue.
ldy $24                      ; Parity was 1. Load RightHelper,
jsl $80F3C9                  ;[$80F3C9] ; then do spiral around it
jsr $B274                    ;[$89B274] ; (like Left Helper's Cannon with Left Helper).
cop #$8D : db $FF                 ; Refresh sprite,
cop #$C2                     ;   then set pointer here and delay 1 frame.
lda $7F0010,x
inc a
and #$00FF
sta $7F0010,x                ; Increment our modifier,
lda $7F100C,x
dec a
sta $7F100C,x                ;   decrease our random number,
bpl +$DB (-$25)              ;[$89B187] ; and keep spiraling until it goes negative.
cop #$C5                     ; Once it's negative, restart loop, possibly fire Bullet.
ldy $24                      ; If a Bullet wasn't fired and the frame counter's
jsl $80F3C9                  ;[$80F3C9] ; parity was 0, we do all of the same things
jsr $B274                    ;[$89B274] ; (spiral around Right Helper etc.).
cop #$8D : db $FF                 ;
cop #$C2                     ;
lda $7F0010,x
dec a
and #$00FF
sta $7F0010,x                ; The difference is we now decrement our angle modifier.
lda $7F100C,x
dec a
sta $7F100C,x
bpl +$DB (-$25)              ;[$89B1AE]
cop #$C5
} ; End of Right Helper Cannon.

; Final Core Death Pointer.
lda #$0001                   ;Delayed
sta $26                      ;
cop #$A5 : db $6E,$A3,$8A,$00,$00,$00,$20    ;[Child: $8AA36E] 
cop #$A5 : db $FA,$B1,$89,$00,$00,$00,$20    ;[Child: $89B1FA] 
cop #$A5 : db $38,$BA,$89,$00,$00,$00,$20    ;[Child: $89BA38] ; Map changer (after a delay).
cop #$DA : db $1D                 ;
cop #$E0                     ;


cop #$88 : db $00,$E0,$8E         ;Child
cop #$CA : db $0A                 ;
cop #$A5 : db $1E,$B2,$89,$00,$C8,$02,$03    ;[Child: $89B21E] 
cop #$DA : db $01                 ;
cop #$A5 : db $2B,$B2,$89,$00,$C8,$02,$03    ;[Child: $89B22B] 
cop #$DA : db $02                 ;
cop #$CB                     ;
cop #$E0                     ;


jsr $B238                    ;[$89B238] Child
cop #$07 : db $06                 ;
cop #$80 : db $07                 ;
cop #$89                     ;
cop #$E0                     ;


jsr $B238                    ;[$89B238] Child
cop #$07 : db $06
cop #$80 : db $01
cop #$89
cop #$E0


cop #$23                     ;
and #$007F                   ;
sec                          ;
sbc #$003F                   ;
clc                          ;
adc $14                      ;
sta $14                      ;
cop #$23                     ;
and #$007F                   ;
sec                          ;
sbc #$003F                   ;
clc                          ;
adc $16                      ;
sta $16                      ;
rts                          ;[$89B221] 

; Used by Final Core Helpers while the Final Core is invulnerable.
; Spirals them around the Final Core.
ldy $24                      ;<--SR ; Load Helper as center of spiral.
jsl $80F3C9                  ;[$80F3C9] ; Do spiral motion.
rts                          ;

; Data tables used by several P3 events.
80 60 28 20 00 e0 c0 a0      ; Rough-grained 180-degree cosine table.
29 30 2c 2f 2a 2e 2b 2d      ; Table of sprite indexes based on DirToPlayer.
04 03 02 01 00 07 06 05      ; Returns 4 - x mod 8.

; SR used by P3 Left Cannon, which should update its sprite based on its angle modifier.
; But this doesn't work quite right, since it uses the top 3 bits of $7F:10,
;   which doesn't update often enough to give a good "animation"... right?
lda $7F0010,x                ;<--SR ; Read value from table of sprite
lsr a                        ;   indexes based on DirToPlayer.
lsr a                        ;
lsr a                        ;
lsr a                        ;
lsr a                        ;
and #$0007                   ; Top 3 bits of $7F:10 determine
phx                          ;   which sprite index
tax                          ;   will be returned.
lda $89B264,x                ; Table of sprite indexes.
plx                          ;
and #$00FF                   ;
sta $28                      ; Store resultant in $28.
rts                          ; Then return.

; Joints of P3 Helpers, which create three each.
; A Joint is always at the midpoint of two other parts.
cop #$8D : db $28                 ;<--Child ; Sprite $28 and update.
stz $08                      ; Act immediately.
jsr $B2B8                    ;[$89B2B8] ; Initialization saves initial x and y.
cop #$C1                     ; Loop body begins.
jsr $B2CD                    ;[$89B2CD] ; Set at midpoint of next and previous parts.
rtl                          ; Repeat next frame. No animations.

; Roots of P3 Helpers.
; The Root always has the same x-coordinate as the corresponding Helper.
; It is raised and lowered in the y-coordinate by the next Joint.
cop #$8D : db $28                 ;<--Child ; Sprite $28 and update.
stz $08                      ; Act immediately.
jsr $B2B8                    ;[$89B2B8] ; Initialization saves initial x and y.
cop #$C1                     ; Loop body begins.
jsr $B2CD                    ;[$89B2CD] ; Set at midpoint of next and previous parts.
lda $0014,y                  ; .Y should always be Helper here, so this should always
sta $14                      ;   return Root to Helper's x-position.
rtl                          ;

; Helper Tendon, created by both Helpers.
; A Tendon is always at the midpoint of the previous Joint and the
;   Cannon, but it uses the Cannon's position in the previous frame,
;   not the current one.
cop #$8D : db $28                 ;<--Child ; Sprite $28 and update.
cop #$C1                     ;
jsl $8AA41C                  ;[$8AA41C] ; Place at midpoint of Cannon and top Joint.
rtl                          ; Do nothing else. (No animations, just movement.)

; Initialization routine of P3 Helper Joints and Roots.
; Saves two copies of initial x and y coordinates.
lda $14                      ;<--SR
sta $7F100C,x                ;
sta $7F0010,x                ;
lda $16                      ;
sta $7F100E,x                ;
sta $7F0012,x                ; Joints and Roots don't use this as a spiral radius.
rts                          ;

; Main loop of P3 Helper Joints and Roots.
; Sets this Joint's position to the midpoint of the next and previous
;   parts: either Tendon, other Joint, Root, or Helper.
; Since the Next part hasn't updated yet in this frame, Next.$14 and Next.$16
;   refer to last frame's x and y coordinates, but Prev.$14 and Prev.$16
;   (if they were used) would refer to this frame's coordinates.
;   So we maintain a copy of the last frame's Prev.$14 and Prev.$16
;   and set our midpoint based on that "anchor point" instead.
ldy $06                      ;<--SR ; $06 is always Tendon or other Joint.
lda $0014,y                  ; Looks a lot like $8AA41C from here on.
clc                          ;
adc $7F100C,x                ;
clc                          ;
bpl +$01                     ;[$89B2DB] 
sec                          ;
ror a                        ;
sta $14                      ;
lda $0016,y                  ;
clc                          ;
adc $7F100E,x                ;
clc                          ;
bpl +$01                     ;[$89B2EA] 
sec                          ;
ror a                        ;
sta $16                      ;
lda $7F0010,x                ;
sta $7F100C,x                ; Update AnchorPointX = PrevLastX,
lda $7F0012,x                ; [Joints and Roots don't use this as a spiral radius.]
sta $7F100E,x                ;   and AnchorPointY = PrevLastY.
ldy $04                      ; $04 is Helper, Root, or other Joint.
lda $0014,y                  ;
sta $7F0010,x                ; Update PrevLastX = $04.x,
lda $0016,y                  ;
sta $7F0012,x                ;   and PrevLastY = $04.y.
rts                          ; Then return.

; Apocalypse Bits.
; The Core changes the Bits' pointers for an Attack.
{
; Left Bit entry point.
jsr $BA14                    ;[$89BA14] Child ; JSR init's properties etc.
cop #$57 : db $C6,$B3,$89         ;[Delayed: $89B3C6] ; Death pointer.
cop #$80 : db $05                 ;<--Branch
cop #$89                     ; Idle sprite is $05.
cop #$C1                     ;
rtl                          ;

; Left Bit pointer is set to here for a Bit Attack.
ldy $24
lda $0024,y                  ; This is 1 if at least one Bit is dead.
cmp #$0001                   ; In that case, this Bit has to be the attacker.
beq +$06                     ;[$89B32E]
lda $0036                    ; If both Bits are alive, this one attacks
lsr a                        ; on odd-numbered frames.
bcc +$E8 (-$18)              ;[$89B316]
cop #$07 : db $21                 ;<--Branch
cop #$80 : db $06                 ; Animate sprite $06,
cop #$89
cop #$80 : db $07                 ; then $07;
cop #$89
lda #$0010
trb $10                      ; then clear invulnerability flag
cop #$80 : db $16                 ; and animate sprite $16.
cop #$89
cop #$07 : db $15                 ; The below creates the Bit Beam Launcher.
cop #$A5 : db $28,$B5,$89,$10,$00,$02,$02    ;[Child: $89B528]
cop #$80 : db $07                 ; Animate sprite $07 again.
cop #$89
cop #$DA : db $77                 ; Wait #$78 frames, then
cop #$80 : db $1B                 ; animate sprite $1B.
cop #$89
lda #$0010
tsb $10                      ; Then become invulnerable,
cop #$80 : db $05                 ; return to sprite $05,
cop #$89                     ; and return to sleeping loop above.
bra +$AC (-$54)              ;[$89B316]

; Right Bit entry point.
; Same as Left Bit, but with H-mirrors.
jsr $BA14                    ;[$89BA14] Child
cop #$57 : db $C6,$B3,$89         ;[Delayed: $89B3C6]
cop #$80 : db $85                 ;<--Branch
cop #$89
cop #$C1
rtl

; Right Bit pointer is set here for a Bit Attack.
; Same as Left Bit, but with H-mirrors.
ldy $24                      ;
lda $0024,y
cmp #$0001
beq +$06                     ;[$89B38A]
lda $0036
lsr a
bcs +$E8 (-$18)              ;[$89B372]
cop #$07 : db $21                 ;<--Branch
cop #$80 : db $86
cop #$89
cop #$80 : db $87
cop #$89
lda #$0010
trb $10
cop #$80 : db $96
cop #$89
cop #$07 : db $15
cop #$A5 : db $E7,$B4,$89,$F0,$00,$02,$02    ;[Child: $89B4E7]
cop #$80 : db $87
cop #$89
cop #$DA : db $77
cop #$80 : db $9B
cop #$89
lda #$0010
tsb $10
cop #$80 : db $85
cop #$89
bra +$AC (-$54)              ;[$89B372]

; Apocalypse Bit P1 death pointer, same for both sides.
; The Bit is needed in P2, so it doesn't really die, just creates
;   a new event that generates explosions as it sinks into the ground.
lda #$0001                   ;Delayed
sta $26                      ; Mark Bit as dead.
ldy $24                      ;
lda $0024,y                  ;
lsr a                        ;
sta $0024,y                  ; Inform Core that a Bit has died.
cop #$A5 : db $79,$B4,$89,$00,$00,$00,$03    ;[Child: $89B479] ; Create falling sprite.
lda #$0002                   ;
tsb $12                      ;
cop #$80 : db $0B                 ;<--Branch ; Animate $0B
cop #$89                     ; to completion,
cop #$C1                     ; then
rtl                          ; sleep.
; End of Apocalypse Bit P1 code.

; Apocalypse Bit P2, routine to run
;   after Core launches its Nuke.
cop #$80 : db $1C                 ; Animate sprite $1C,
cop #$89
cop #$07 : db $20                 ;  play a sound,
cop #$A5 : db $FD,$B3,$89,$00,$00,$02,$03    ;[Child: $89B3FD] ; create this,
bra +$E5 (-$1B)              ;[$89B3E2] ; animate $0B, and sleep.

; Apocalypse Bit P2's converging energy animation.
; Each Bit creates a projectile; they converge in the center of the screen,
;   then one dies and the other changes to a new sprite and flies up.
; Once off-screen, the "converged" projectile emits a rain of fire.
lda #$0080                   ;<--Child
sta $7F0018,x
lda $16
clc
adc #$0010
sta $7F001A,x
cop #$B6 : db $30                 ; Priority: Over both BGs.
cop #$22 : db $0C,$02             ; Move to #$80,y+#$10 with sprite $0C at 2px/frame.
cop #$80 : db $0C                 ; Animate sprite $0C again.
cop #$89
lda $0E
bit #$C000
beq +$26                     ;[$89B447] ; Kill the one that's not mirrored.
cop #$07 : db $21                 ; Continue with the mirrored one. Play a sound.
cop #$80 : db $0D                 ; Animate sprite $0D.
cop #$89
cop #$07 : db $1D                 ; Sound.
cop #$86 : db $0E,$06,$0C         ; Vertical move, sprite $0E, $06 steps, script $0C.
cop #$8A                     ;
lda #$2000
tsb $10                      ; Exclude from physics and rendering engine.
cop #$CA : db $0E                 ; Loop.
cop #$9C : db $49,$B4,$89,$02,$02    ;[Child: $89B449] ; Rain of fire.
cop #$DA : db $0E                 ; Delay.
cop #$CB                     ; End loop.
cop #$E0                     ;<--Branch ; Die.

; Apocalypse Bit P2's rain of fire.
; The fire (inefficiently) chooses a random x-position and one of two speeds.
cop #$07 : db $23                 ;<--Child ; Sound.
cop #$23                     ; Random number,
sta $14                      ;   set as x position.
cop #$23                     ; Another random number;
lsr a                        ;   if the high bit is 0 continue here,
bcs +$12                     ;[$89B467] ; otherwise follow that branch.
cop #$86 : db $0F,$14,$03         ;<--Branch ; High bit was 0. Vertical move,
cop #$8A                     ;   sprite $0F, $14 steps, script $03.
lda $16                      ; Then check y. If it's off the top of the screen,
bmi +$F5 (-$0B)              ;[$89B455] ; do the move again.
cmp #$0120                   ; If it's on-screen,
bcc +$F0 (-$10)              ;[$89B455] ; do the move again.
cop #$E0                     ; Once it's safely off-screen, it dies.
cop #$86 : db $0F,$14,$05         ;<--Branch ; High bit of random number was 1.
cop #$8A                     ; Same as above, but vertical move $05.
lda $16                      ;
bmi +$F5 (-$0B)              ;[$89B467]
cmp #$0120
bcc +$F0 (-$10)              ;[$89B467]
cop #$E0                     ; Once it's safely off-screen, it dies.

; Apocalypse Bit P1's death animation event.
; Not the Bit itself, but a new created sprite that falls into the ground
;   and generates explosions on its way down.
cop #$B6 : db $30                 ;Child
lda #$0002                   ;
tsb $12                      ;
cop #$23                     ;
lda $0036                    ;
lsr a                        ;
bcs +$09                     ;[$89B492] 
cop #$9C : db $C9,$B4,$89,$02,$03    ;[Child: $89B4C9] ; Explosion $07.
bra +$07                     ;[$89B499] 
cop #$9C : db $D8,$B4,$89,$02,$03    ;[Child: $89B4D8] ; Explosion $01.
lda $0410                    ;
and #$001F                   ;
sec                          ;
sbc #$000F                   ;
clc                          ;
adc $14                      ;
sta $0014,y                  ;
lda $0411                    ;
and #$001F                   ;
sec                          ;
sbc #$000F                   ;
clc                          ;
adc $16                      ;
sta $0016,y                  ;
cop #$86 : db $05,$07,$01         ; Sprite $05 and move vertical.
cop #$8A                     ;
lda $10                      ;
bit #$4000                   ;
beq +$BA (-$46)              ;[$89B481] 
cop #$E0                     ;

; Apocalypse Bit P1's death explosion, sprite $07.
cop #$88 : db $00,$E0,$8E         ;Child
cop #$07 : db $06                 ;
cop #$80 : db $07                 ;
cop #$89                     ;
cop #$E0                     ;

; Apocalypse Bit P1's death explosion, sprite $01.
cop #$88 : db $00,$E0,$8E         ;Child
cop #$07 : db $06                 ;
cop #$80 : db $01                 ;
cop #$89                     ;
cop #$E0                     ;

; Right Bit Beam. Creates/becomes projectiles when BitR attacks.
; Same as Left Bit Beam, below, but without the H-mirrors.
cop #$B6 : db $30                 ;<--Child
lda #$0005
sta $26
cop #$9C : db $00,$B5,$89,$02,$02    ;[Child: $89B500] <--Branch
lda $26
sta $0026,y
dec a
sta $26
bne +$EF (-$11)              ;[$89B4EF]
cop #$5B : db $10,$00             ;<--Child
lda $26
phx
tax
lda $89B57A,x
and #$00FF
plx
sta $7F001A,x
lda #$0008
sta $7F0018,x
cop #$B1
cop #$84 : db $11,$20
cop #$8A
cop #$AA : db $08
bra +$3F                     ;[$89B567] ; Die after going off-screen.

; Left Bit Beam. Creates/becomes projectiles when BitL attacks.
cop #$B6 : db $30
lda #$0005                   ; Makes 5 of them plus the caller.
sta $26
cop #$9C : db $41,$B5,$89,$02,$02    ;[Child: $89B541] <--Branch
lda $26
sta $0026,y
dec a
sta $26
bne +$EF (-$11)              ;[$89B530]
cop #$5B : db $10,$00             ;<--Child ; Die on collision with player.
lda $26                      ; $26 numbers the five projectiles.
phx
tax
lda $89B57A,x                ; Load a y-move speed for this projectile.
and #$00FF
plx
sta $7F001A,x
lda #$0007                   ; x-move speed.
sta $7F0018,x
cop #$B1                     ; Load move pattern into $7E bank.
cop #$84 : db $91,$20             ; Animate sprite $11, H-mirror, $20 times.
cop #$8A
cop #$AA : db $07                 ; Set x-move pattern to $07.
cop #$C1
lda $10
bit #$4000
bne +$01                     ;[$89B571]
rtl
lda #$0014                   ;<--Branch
sta $08                      ; Once the event is off-screen, wait
cop #$C2                     ; #$14 frames, then kill it.
cop #$E0

$03,$01,$00,$02,$04          ; Data table of moves for projectiles.
} ; End Apocalypse Bits.


; Apocalypse Launchers.
{
; Launcher graphics.
lda #$0002                   ;Child
tsb $12                      ; Persistent horizontal mirror flag.
cop #$BB                     ; Set horizontal mirror flag.
cop #$80 : db $08                 ;Child ; Also returns here after a salvo.
cop #$89                     ; Animate sprite $08 one full cycle,
cop #$C1                     ;  then set event pointer here
rtl                          ;  to sleep until something wakes us.

; Launchers fire every #$021D(?) frames in P1,
;   due to Core setting their event pointers here.
cop #$CA : db $05                 ; Loop 5 times.
cop #$80 : db $09
cop #$89                     ; Animate sprite $09 one full cycle,
cop #$80 : db $0A                 ;  then $0A one full cycle,
cop #$89                     ;  then spawn a Chaser,
cop #$A5 : db $A8,$B7,$89,$00,$00,$02,$02    ;[Child: $89B7A8]
cop #$80 : db $1A                 ;  then animate $1A one full cycle.
cop #$89
cop #$CB                     ; Loop end.
bra +$D9 (-$27)              ;[$89B586] ; Return to animate $08 and sleep.

; Launchers fire every ?? frames in P2, etc.
;   The animation sequence and Chaser are the same as in P1,
;   but only one Chaser is fired.
cop #$80 : db $09
cop #$89
cop #$80 : db $0A
cop #$89
cop #$A5 : db $A8,$B7,$89,$00,$00,$02,$02    ;[Child: $89B7A8]
cop #$80 : db $1A
cop #$89
bra +$BF (-$41)              ;[$89B586] ; Return to animate $08 and sleep.
} ; End Apocalypse Launchers.


; Apocalypse Brain. Scrolls the camera and pieces on-screen initially,
;   then informs the Core to start the fight,
;   then hovers the camera and Core and some other pieces
;   using some clever (if unoptimized) trigonometry.
{
ldy $06                      ;Child
lda $0014,y                  ; $06 == Core, so now
sta $20                      ;  $20/$22 = CoreX/CoreY.
lda $0016,y                  ;
sta $22                      ;
lda #$0000                   ;
sta $7F0010,x                ; Initialize:
lda #$0010                   ;  $7F:10 = 0,
sta $7F0012,x                ;  $7F:12 = #$0010,
lda $16                      ;  $7F100C,x = $16,
sta $7F100C,x                ;  $26 = $16 - #$0100.
lda $16                      ;
sec                          ;
sbc #$0100                   ;
sta $26                      ;
cop #$C1                     ; Then set event pointer here.
lda $16                      ; If we haven't reached y=0, then...
beq +$39                     ;[$89B62E] 
sec                          ;
sbc #$0002                   ;
sta $16                      ;   Shift y up by 2,
lda #$FFFE                   ;
sta $001C                    ;   and set Low$0018/$001C = 0/-2
stz $0018                    ;     so we can move our projectiles and camera.
ldy $06                      ;   (Still $06 == Core.)
clc                          ;
adc $0016,y                  ;   (.A still contains #$FFFE.)
sta $0016,y                  ;   Shift CoreY up by 2 as well.
jsr $B9CC                    ;[$89B9CC] ; Move Children and Camera.
lda $16                      ;   $26 == InitialY - #$0100, so this means
sec                          ;    return if InitialY - NewY <= #$0100
sbc $26                      ;    (i.e. we've moved less than a screen).
bmi +$01                     ;[$89B618]
rtl
eor #$FFFF                   ;   After we've moved a full screen, store the
inc a                        ;    negative of the "overshoot" in Low$001C
sta $001C                    ;    (probably 1 or 0, right?)
stz $16                      ;    and zero our own y position.
ldy $06
clc
adc $0016,y
sta $0016,y                  ;   Correct CoreY by the amount of overshoot,
jsr $B9CC                    ;[$89B9CC] ; then children and camera as well.
rtl                          ;   And we're done.
ldy $24                      ; Our upward movement has reached y=0.
lda #$0003                   ; Core created us, so $24 == Core; load that
sta $0024,y                  ;   and write Core.$24 = #$03 to make it act.
bra +$15                     ;[$89B64D] ; Then set event pointer at $b64d.
clc                          ;Branch ; $7F:10 was #$40 or #$C0.
adc #$0002                   ; That means we've hit the top or bottom of our
sta $7F0010,x                ;  sine "wave" of movement, and should hover for
cop #$23                     ;  a brief (random) time.
and #$003F                   ;
clc                          ;
adc #$0028                   ;
sta $08                      ; Hover for #$28 + rand(0,#$3F) frames.
cop #$C2                     ; Return to caller and come back here after that.
cop #$C1                     ;Branch ; Ptr sets here if we reach y=0.
lda $7F0010,x                ; This initializes to 0.
cmp #$0040                   ; If it reaches #$40 or #$C0,
beq +$E0 (-$20)              ;[$89B638] ; head up to
cmp #$00C0                   ;   the $b638 branch.
beq +$DB (-$25)              ;[$89B638] 
clc                          ;
adc #$0002                   ; If $7F:10 is not #$40 or #$C0,
and #$00FF                   ;  add 2 (mod #$100).
sta $7F0010,x                ; That's the input to $ba59,
jsr $BA59                    ;[$89BA59] ; Sine Function With Scale Factor.
clc                          ; Now .A = sin($7F:10) * $7F:12 / #$0100.
adc $7F100C,x                ; This initialized to InitialY,
sta $16                      ;   so now NewY = InitialY + ScaledSine.
ldy $06                      ;
lda $20                      ; CoreX,
sec                          ;
sbc $14                      ;   minus ThisX,
eor #$FFFF                   ;
inc a                        ;   negative.
sta $0018                    ; So $0018 = ThisX - CoreX.
clc                          ;
adc $0014,y                  ;
sta $0014,y                  ; Set CoreX = ThisX.
lda $22                      ;
sec                          ;
sbc $16                      ;
eor #$FFFF                   ;
inc a                        ;
sta $001C                    ; Likewise $001C = ThisY - CoreY,
clc                          ;
adc $0016,y                  ;
sta $0016,y                  ; and set CoreY = ThisY.
lda $14                      ;
sta $20                      ; Update stored variables:
lda $16                      ;  $20/$22 = ThisX/ThisY.
sta $22                      ;
jsr $B9CC                    ;[$89B9CC] ; Finally update children and camera.
rtl                          ; Then return.
; End Apocalypse Brain P1 loop.

; Apocalypse Brain, code to run after Core P2 dies.
lda $14
sta $7F0010,x                ; Store x position.
cop #$CA : db $80                 ; Loop.
cop #$23                     ; Random number.
lda $16
clc
adc #$0002
sta $16                      ; y += 2
lda #$0002
sta $001C                    ; Store a 2 as camera y-move distance per frame.
ldy $06                      ; (Core)
clc
adc $0016,y
sta $0016,y                  ; CoreY += 2
lda $14
pha                          ; Push BrainX.
lda $0410
and #$0003
sec
sbc #$0001
clc
adc $7F0010,x                ;
sta $14                      ; BrainX = initialX += rand(-1,2), a shaking effect.
sec
sbc $01,s
sta $0018                    ; Camera x-move distance = new BrainX - initial BrainX.
pla
lda $0018
clc
adc $0014,y
sta $0014,y                  ; Move Core by the same amount.
jsr $B9CC                    ;[$89B9CC] ; Move Children and Camera.
cop #$CB                     ; End loop.
ldy $06                      ; (Core)
lda #$0000                   ;
sta $0026,y                  ; Set Core$26 to 0 to inform it that we're done.
cop #$E0                     ; The Brain finally dies. Only the Core survives.
; End Apocalypse Brain post-P2 screen scroll routine.
} ; End Apocalypse Brain code.


; Palette event. Broken:
;  once it reaches its second phase, it doesn't
;  do anything.
{
ldy $24                      ;Child
lda $0026,y                  ;
bne +$07                     ;[$89B70A] 
cop #$37 : db $63                 ;
cop #$39                     ;
bra +$F2 (-$0E)              ;[$89B6FC] 
cop #$C1                     ;
ldy $24                      ;
lda $0026,y                  ;
cmp #$0002                   ;
beq +$01                     ;[$89B717] 
rtl                          ;
cop #$E0                     ;
}

; Palette Event -- Colors of the End
{
cop #$37 : db $62                 ;Child
cop #$39                     ;
cop #$23                     ;
cmp #$00C0                   ;
bcc +$19                     ;[$89B73E] 
cop #$37 : db $66                 ;
cop #$39                     ;
cop #$23                     ;
and #$0007                   ;
clc                          ;
adc #$0004                   ;
sta $08                      ;
cop #$C2                     ;
cop #$37 : db $66                 ;
cop #$39                     ;
cop #$23                     ;
sta $08                      ;
sta $072A                    ;
cop #$C2                     ;
bra +$D2 (-$2E)              ;[$89B719] 
}

; Floor Beam Spawner -- Definitely broken.
; This is meant to create a Floor Beam ($89b787)
;  at random intervals, beginning after the Core rises up.
; It does successfully create the Orbs, but the
;  movescript relies on their animation for its timing,
;  and of course we don't know how long that animation was.
{
cop #$B6 : db $30                 ;Child
lda #$00A0                   ;
sta $14                      ;
lda #$00C0                   ;
sta $16                      ;
cop #$C1                     ;
ldy $24                      ;
lda $0016,y                  ;
sec                          ;
sbc #$0030                   ;
sec                          ;
sbc $16                      ;
bmi +$01                     ;[$89B765] 
rtl                          ;
cop #$C1                     ;
cop #$9C : db $87,$B7,$89,$00,$03    ;[Child: $89B787] 
lda $0410                    ;
and #$0003                   ;
clc                          ;
adc #$0005                   ;
sta $08                      ;
ldy $24                      ;
lda $0010,y                  ;
bit #$0040                   ;
bne +$01                     ;[$89B785] 
rtl                          ;
cop #$E0                     ;
}


; Floor Beam.
; Almost functional. The problem is the COP #$81 that
;  moves the Beam. It's an animated-mover effect, so the
;  Beam moves until its animation has finished, and we don't
;  know how long the animation was supposed to be.
; Originally I figured this was a protective and/or damaging barrier,
;  but the Spawner creates these with collisions disabled...
{
cop #$23                     ;Child ; Dumb application of RNG.
and #$0007                   ;
sec                          ;
sbc #$0003                   ;
clc                          ;
adc $16                      ;
sta $16                      ; Sets y += rand(-$03,+$03),
lda $0411                    ;
and #$0003                   ;
clc                          ;
adc $14                      ;
sta $14                      ;   and likewise x.
cop #$81 : db $15,$08             ; Then animates sprite $15, H-move
cop #$89                     ;   pattern $08, until it runs out of frames,
cop #$E0                     ;   then dies.
}


; Chaser Orb created by Launchers during P1 and P2.
{
lda #$0080                   ; Purpose unknown, but maybe this
tsb $12                      ;   will inspire me to figure it out.
cop #$07 : db $1E                 ; Sound.
lda $0E
bit #$4000                   ; H-mirror is inherited from Launcher.
beq +$0A                     ;[$89B7C1] ; If we're H-mirrored,
cop #$BC : db $04,$FA             ;   offset us by +$04/-$06, and
cop #$AC : db $01,$02             ;   set our x/y move patterns to $01/$02.
bra +$08                     ;[$89B7C9] ; If we're not H-mirrored,
cop #$BC : db $FC,$FA             ;   offset by -$04/-$06, with
cop #$AC : db $02,$02             ;   x/y move patterns $02/$02.
lda #$0020
tsb $12                      ; Persistent H-mirror flag.
lda #$0000
sta $7F0026,x                ; Zero HP.
cop #$57 : db $4F,$B8,$89         ;[Delayed: $89B84F] ; Event pointer on death.
cop #$B6 : db $30                 ; Priority: Over both BGs.
cop #$80 : db $14                 ; Animate sprite $14 and follow prescribed
cop #$89                     ;   move pattern until anim frames run out.
cop #$B1                     ; Load saved move pattern, then
cop #$80 : db $17                 ;   animate sprite $17 and follow that
cop #$89                     ;   move pattern until anim frames run out.
lda #$0200
trb $10                      ; Clear persistent H-mirror.
lda #$B802
sta $7F001E,x                ; Save a jump target,
sta $00                      ;   and set it as next frame's event pointer.
lda $0B02                    ; Unknown purpose,
clc
adc #$0005                   ;   but we add 5 to it
sta $7F0014,x                ;   and set it as an initial counter.
cop #$C1                     ; loljk, event pointer here instead. (Loop start.)
cop #$23                     ; Random number in .A, player-event in .Y...
ldy $09AA
and #$007F
sec
sbc #$003F
clc
adc $0014,y
sta $7F0018,x                ; ...to set $7F:18 = PlayerX + rand($7F) - #$3F.
bpl +$01                     ;[$89B81B] ; That can be <0 if Player is within
rtl                          ; #$3F of left side, in which case we do nothing.
cmp #$0108                   ; Likewise it can eval past the right side
bcc +$01                     ;[$89B821] ; of the screen,
rtl                          ; in which case we again do nothing.
lda $0411
and #$007F
sec
sbc #$003F
clc
adc $0016,y                  ; Likewise for PlayerY,
sta $7F001A,x                ;   $7F:1A = PlayerY + rand($7F) - #$3F, ...
bpl +$01                     ;[$89B836]
rtl
cmp #$00E8
bcc +$01                     ;[$89B83C]
rtl                          ; ...and continue only if that's on-screen.
cop #$22 : db $18,$02             ; Animate sprite $18, moving 2px/frame,
lda $10                      ;   toward PlayerX/Y +- RandX/RandY; then
bit #$4000                   ;   if the Chaser has ended up off-screen,
bne +$37                     ;[$89B87E] ; just die.
cop #$84 : db $18,$02             ; Animate sprite $18 twice.
cop #$8A                     ; ^
cop #$CB                     ; Chase the player again next frame, unless...
cop #$88 : db $00,$E0,$8E         ;Delayed ; ...our timer runs out or we're killed.
lda $16                      ; Either case means it's time to die,
sec                          ;   so we set our spriteset to the "Random stuff"
sbc #$0008                   ;   page, and move our center down 8 pixels.
sta $16
lda #$0003                   ; Create four copies of $b880 (Debris)
sta $24                      ;   using our new position.
cop #$9C : db $80,$B8,$89,$02,$02    ;[Child: $89B880]
dec $24
bpl +$F5 (-$0B)              ;[$89B861]
stz $24
lda $16
clc
adc #$0004
sta $16                      ; Move back up 4 more pixels,
cop #$07 : db $1D
cop #$80 : db $02                 ; then animate sprite $02,
cop #$89
cop #$E0                     ; then die.
}

; 4 Debris are created by Chaser Orb
;   as it's dying (due to time or being killed).
{
pea $B8AE                    ;Child ; Now RTS will go to $b8af.
ldy $24                      ; This is cheating, but probably safe.
lda $0024,y                  ; Each Debris reads the now-dead Creator's
inc a                        ;   $24, then increments it for the next one,
sta $0024,y                  ;   and its value determines the move script
cmp #$0001                   ;   for the Debris to use: either
beq +$19                     ;[$89B8AA] ; $02/$02,
cmp #$0002
beq +$0F                     ;[$89B8A5] ; $02/$01,
cmp #$0003
beq +$05                     ;[$89B8A0] ; $01/$02,
cop #$AC : db $01,$01             ; or $01/$01.
rts                          ;[$89B8AF]
cop #$AC : db $01,$02
rts                          ;[$89B8AF]
cop #$AC : db $02,$01
rts                          ;[$89B8AF]
cop #$AC : db $02,$02
rts
cop #$80 : db $07                 ; The Debris animates sprite $07 with that
cop #$89                     ;   move pattern until it runs out of anim
cop #$E0                     ;   frames, then dies.
} ; End Chaser Orb Debris code.


; Apocalypse Core Nuke.
; Spawned during the Core's P2 loop.
{
cop #$B6 : db $30                 ;Child
cop #$86 : db $12,$02,$03         ; Animate sprite $12, $02 times, with vertical
cop #$8A                     ; movescript $03; then
cop #$84 : db $12,$02             ; animate another $02 times.
cop #$8A                     ;
cop #$07 : db $1E                 ; Sound.
cop #$23                     ; RNG. Randomly selects initial angle.
sta $26                      ;
cop #$9C : db $F3,$B8,$89,$02,$02    ;[Child: $89B8F3] ; Create one Nuke Piece.
lda $26                      ;
clc                          ;
adc #$0055                   ; Advance its initial angle 120 degrees.
and #$00FF                   ;
sta $0026,y                  ;
cop #$9C : db $F3,$B8,$89,$02,$02    ;[Child: $89B8F3] ; Create another Nuke Piece.
lda $26                      ;
clc                          ;
adc #$00AA                   ; Advance its initial angle 240 degrees.
and #$00FF                   ;
sta $0026,y                  ;
lda $26                      ;Child ; There are now three Nuke Pieces.
sta $7F0010,x                ; Initial angle plus-or-minus 120 degrees.
lda #$0000                   ;
sta $7F0012,x                ; Initial distance from center.
lda $14                      ;
sta $7F0018,x                ; Center point x.
lda $16                      ;
sta $7F001A,x                ; Center point y.
lda #$0001                   ;
sta $7F100E,x                ; Unknown purpose.
sta $7F100C,x                ; Unknown purpose.
cop #$8D : db $13                 ; Animate sprite $13,
cop #$8B                     ;  but continue this frame's code.
lda $2A                      ; If there's no AnimFrame left,
beq +$FA (-$06)              ;[$89B91A] ; just start $13 over again,
lda $08                      ; but still move on in any case.
stz $08                      ;
sta $26                      ; Set $26 = next frame visible time,
cop #$C2                     ; set pointer here, and delay 1 frame. Loop start.
sep #$20                     ;
lda $7F0010,x                ; Contains the spiral angle.
clc                          ;
adc #$02                     ;
sta $7F0010,x                ; Advance spiral angle by 2.
lda $7F0012,x                ; Contains the distance from the spiral center.
clc                          ;
adc #$04                     ;
sta $7F0012,x                ; Advance radius by 4.
bcs +$2E                     ;[$89B970] ; Provided the result is <= #$FF,
rep #$20                     ;
lda $14                      ;
pha                          ;
lda $16                      ;
pha                          ; push the current x and y
lda $7F0018,x                ;
sta $14                      ;
lda $7F001A,x                ;
sta $16                      ; and restore the initial x and y.
jsl $80F3D3                  ;[$80F3D3] ; This SR updates x and y based on
pla                          ;   our position in the spiral; then
sec                          ;
sbc $16                      ;
sta $7F100E,x                ;   store the delta between our old and new
pla                          ;   x/y positions in $7F100C/E.
sec                          ;
sbc $14                      ;
sta $7F100C,x                ;
dec $26                      ; Repeat the above from $89b924 for every WaitFrame
bpl +$B8 (-$48)              ;[$89B926] ; in this animation, then
bra +$AA (-$56)              ;[$89B91A] ; go on to the next AnimFrame.
rep #$20                     ;<--Branch ; If we push $7F:12 above #$FF,
lda #$6000                   ;
trb $12                      ; set E->W and S->N movement conversion, then
lda $7F100C,x                ;
eor #$FFFF                   ;
inc a                        ;
sta $7F100C,x                ; negate our x delta
lda $7F100E,x                ;
eor #$FFFF                   ;
inc a                        ;
sta $7F100E,x                ; and y delta,
bra +$0E                     ;[$89B99F] ; and jump ahead a little.
cop #$8B                     ;<--Branch ; From here on is a copy of
lda $2A                      ; the above that skips the trigonometry
beq +$FA (-$06)              ;[$89B991] ; and just moves the Nuke Pieces
lda $08                      ; linearly each frame.
stz $08                      ; We get here after advancing the radius past #$FF.
sta $26                      ;
cop #$C2                     ;
lda $7F100C,x                ;
sta $7F002C,x                ; Set $7F:2C = negative x-delta,
lda $7F100E,x                ; $7F:2E = negative y-delta, so we have a
sta $7F002E,x                ; linear move from now on.
lda $10                      ;
bit #$4000                   ; If we're now off-screen,
bne +$06                     ;[$89B9BC] ; go ahead and die.
dec $26                      ; Otherwise, keep animating as before, but
bpl +$E3 (-$1D)              ;[$89B99D] ; using the above linear move
bra +$D5 (-$2B)              ;[$89B991] ; updates based on sprite WaitFrames.
cop #$E0                     ;
} ; End Apocalypse Core Nuke.


; P2 Intro Palette Shifter.
cop #$37 : db $6A                 ;Child
cop #$39                     ;
cop #$E0                     ;


; P2 Nuke Launch and/or Death, Palette Shifter.
cop #$37 : db $69                 ;Child
cop #$39                     ;
cop #$E0                     ;


; Subroutine - Move Children and Camera
; Called by (e.g.) Brain when it moves Gaia upward in P1.
; Iterates through the .Next chain and moves all of its children by
;   x/y = Low$0018/$001C, then moves the camera by the same amount.
phx                          ;SR
ldx $0006,y                  ; .X = Caller.Next.
sty $0000                    ; $0000 = Caller.
lda $0000                    ; Loop start.
cmp $7F001C,x                ; If Caller == Caller.Next.Parent...
bne +$1A                     ;[$89B9F6] 
lda $0014,x                  ;
clc                          ;
adc $0018                    ;
sta $0014,x                  ;   Shift Caller.Next.x by Low$0018,
lda $0016,x                  ;
clc                          ;
adc $001C                    ;
sta $0016,x                  ;   and Caller.Next.y by Low$001C.
lda $0006,x                  ;   Then re-call this loop using
tax                          ;     .X = Caller.Next.Next.
bra +$DD (-$23)              ;[$89B9D3] 
plx                          ; Reached an event that is not a child of Caller.
lda $0018                    ;
eor #$FFFF                   ;
inc a                        ;
clc                          ;
adc $06C0                    ;
sta $06C0                    ; Shift EffectLayerX by -Low$0018,
lda $001C                    ;
eor #$FFFF                   ;
inc a                        ;
clc                          ;
adc $06C4                    ;
sta $06C4                    ; and EffectLayerY by -Low$001C,
rts                          ; and return.


; Subroutine -- Initialize Apocalypse Bit
; Sets properties of the Apocalypse Bits.
lda #$8011                   ;
tsb $12                      ; Physics flags, unknown purposes.
lda $7F002A,x                ;
ora #$0080                   ; Exclude from monster counter.
sta $7F002A,x                ;
lda #$AD44                   ;
sta $7F0020,x                ; Set address of vital stats.
lda $AD44                    ;
and #$00FF                   ;
sta $7F0026,x                ; Set health.
stz $26                      ; Zero internal variable.
rts                          ;[$89B311] 

; Map changer. Places us on the Comet with Kara, credits roll, etc.
lda #$8000                   ;Child
tsb $065A                    ;
cop #$DA : db $EF                 ;
lda #$0000                   ;
sta $0AD4                    ;
lda #$0404                   ;
sta $064A                    ;
cop #$26 : db $E5,$00,$00,$00,$00,$00,$00,$11    
cop #$E0                     ;


; Sine function with scale factor.
; Sets .A = sin($7F:10 * 360/256 deg) * ($7F:12 / #$0100).
; SR called e.g. by Brain after it's reached y=0 and entered a new loop.
SR_ScaledSine89:
lda $7F0010,x : tay
sep #$20
clc
lda $C455,y
bpl +
  eor #$FF : inc a
  sec
+:
xba
lda $7F0012,x
jsl LR_MultiplyBytesOfA    ; $8281D1
rep #$20
xba
and #$00FF
bcc +
  eor #$FFFF : inc a
+:
rts
}


org $89bb17
; The math below just iterates through every screen in the map
;   to update tile solidity to match EffectLayer (except EffectLayer
;   tile type $00, which is ignored). Special handling is required
;   because the EffectLayer camera is offset from the MapLayer camera
;   after the elevator scrolls, which doesn't actually change the
;   EffectLayer tilemap; so we need to effectively offset the
;   tilemap to match the EffectLayer camera offset.
LR_PymdUpdateMapSolidityFromEffectLayer:
phx
phd
phb
php
rep #$20
lda #$0000 : tcd
lda #$0100 : sta $3E
sep #$20
lda #$7E : pha : plb
lda #$7F : sta $40    ; [$3E] now resolves to $7f0100, table of EffectLayer tile default solidities.
lda $06BF : sec : sbc $06C1 : sta $18   ; $18 = screen diff between MapCameraX and EffectCameraX.
lda $06C3 : sec : sbc $06C5 : sta $1C   ; $1C = screen diff between MapCameraY and EffectCameraY.
stz $19
stz $1D
B_89BB46:   ; org $89bb46
lda $19 : clc : adc $18 : bmi B_89BB89
  cmp $0693 : bcs B_89BB93   ; cmp to MapLayerXSizeScreens
lda $1D : clc : adc $1C : bmi B_89BB93
  cmp $0697 : bcs .Done   ; cmp to MapLayerYSizeScreens
lda $1D : xba
lda $0695 : jsl LR_MultiplyBytesOfA : clc : adc $19
xba   ; Ah = EffectLayerXSizeScreens * $1D + $19
lda #$00 : tay   ; Yh = EffectLayerXSizeScreens * $1D + $19, Yl = 0
lda $1D : clc : adc $1C
xba   ; Ah = $1D + $1C, Al = EffectLayerXSizeScreens * $1D + $19 but will be discarded
lda $0693 : jsl LR_MultiplyBytesOfA : clc : adc $19 : clc : adc $18
xba   ; Ah = MapLayerXSizeScreens * ($1D + $1C) + $19 + $18
lda #$00 : tax   ; Xh = MapLayerXSizeScreens * ($1D + $1C) + $19 + $18, Xl = 0
jsr SR_PymdUpdateSingleScreenSolidityFromEffectLayer
B_89BB89:   ; org $89bb89
lda $19 : inc : sta $19
cmp $0695 : bcc B_89BB46
B_89BB93:   ; org $89bb93
stz $19
lda $1D : inc : sta $1D
cmp $0699 : bcc B_89BB46
.Done:   ; org $89bb9f
plp
plb
pld
plx
rtl

; If called with Xl = Yl = 0, Xh = Yh = screen number (counted L->R, T->B as usual),
;   and $3E = $7f0100, updates solidity of the whole screen to EffectLayer
;   tile solidities, but ignores EffectLayer tile type $00 so normal
;   MapLayer solidity will still apply to those tiles.
SR_PymdUpdateSingleScreenSolidityFromEffectLayer:   ; org $89bba4
.NextTile:
lda $C000,y : beq .IncCounter
  sta $3E
lda [$3E] : sta $7FC000,x
.IncCounter:   ; org $89bbb1
iny
inx : txa : bne .NextTile
rts
warnpc $89bbb7


org $89BBF7
db $C1,$03,$06,$C7,$0D,$03,$C2,$01,$D6,$25,$D6,$1D,$A4,$84,$A2,$A2,$88,$81,$8B,$84,$4F,$AC,$CB,$4B,$84,$80,$A6,$84,$AC,$8C,$84,$AC,$80,$8B,$8E,$8D,$84,$4F,$AC,$47,$8E,$A7,$AC,$CB,$85,$80,$A2,$AC,$D6,$EF,$A9,$8E,$A5,$AC,$86,$8E,$0D,$4F,$C3,$00,$C0

;org $89BC34
db $3F,$00,$18
ECSongPuzzleFlower:



org $89BC51
db $D3,$45,$8B,$8E,$A7,$84,$A2,$AC,$88,$8D,$AC,$A4,$87,$84,$AC,$82,$8E,$A2,$8D,$84,$A2,$2F,$CB,$64,$A2,$A9,$AC,$D6,$C4,$A4,$87,$84,$AC,$45,$8B,$A5,$A4,$84,$2A,$2A,$2A,$CB,$D7,$27,$A4,$87,$84,$AC,$8C,$84,$8B,$8E,$83,$A9,$2A,$2A,$2A,$C0

;org $89BC8B
db $0F,$01,$01
ECSongPuzzleWestButton:



org $89BCD1
db $0F,$01,$01
ECSongPuzzleEastButton:


org $89BD58
db $D3,$C2,$02,$67,$80,$88,$A4,$4F,$AC,$48,$AC,$A4,$8E,$8B,$83,$AC,$A9,$8E,$A5,$2B,$CB,$A9,$8E,$A5,$AC,$D6,$98,$A4,$8E,$AC,$A0,$A5,$A3,$87,$AC,$A4,$87,$84,$8C,$CB,$80,$A4,$AC,$A4,$87,$84,$AC,$D6,$CD,$A4,$88,$8C,$84,$4F,$CF,$D1,$74,$BE,$C9,$1E,$D3,$C2,$02,$63,$A4,$8E,$A0,$4F,$CB,$64,$87,$84,$AC,$D7,$58,$88,$A3,$AC,$8E,$A0,$84,$8D,$4F,$4F,$CF,$46,$8E,$AC,$88,$8D,$4F,$4F,$C0

;org $89BDB5
db $00,$00,$23
ECSongPuzzleListener:
cop #$D1 : dw $0113 : db $01 : dw B_89BE6D
cop #$D2 : db $02, $01
cop #$C1
cop #$21 : db $03 : dw B_89BDCB
rtl
B_89BDCB:    ; org $89bdcb
lda #$CFF0 : tsb $065A
cop #$DA : db $1D
cop #$BF : dw $BE70
cop #$04 : db $1B
cop #$DA : db $3B
lda #$CFF0 : trb $065A
J_89BDE4:    ; org $89bde4
cop #$C1
lda #$2200 : sta $0E
cop #$CA : db $78
cop #$D0 : db $03, $01 : dw B_89BE67
cop #$CB
cop #$07 : db $10
cop #$CA : db $3C
cop #$D0 : db $03, $01 : dw B_89BE67
jsr S_89BEFC
lda #$0001 : sta $0000
jsl LR_StageBcdInManualOam
cop #$CB
cop #$CA : db $78
cop #$D0 : db $03, $01 : dw B_89BE67
cop #$CB
cop #$07 : db $10
cop #$CA : db $3C
cop #$D0 : db $03, $01 : dw B_89BE67
jsr S_89BEFC
lda #$0002 : sta $0000
jsl LR_StageBcdInManualOam
cop #$CB
cop #$CA : db $63
cop #$D0 : db $03, $01 : dw B_89BE67
cop #$CB
cop #$CC : db $01
cop #$07 : db $11
cop #$CA : db $28
cop #$D0 : db $02, $00 : dw B_89BE6D
jsr S_89BEFC
lda #$0003 : sta $0000
jsl LR_StageBcdInManualOam
cop #$CB
cop #$CE : db $01
cop #$BF : dw $BD58
B_89BE67:    ; org $89be67
cop #$CE : db $03
jmp J_89BDE4
B_89BE6D:    ; org $89be6d
cop #$C1
rtl

;org $89BE70
db $C2,$0B,$C2,$02,$D6,$46,$66,$8E,$88,$82,$84,$2F,$AC,$64,$87,$84,$AC,$D7,$58,$CB,$D6,$FA,$8E,$A0,$84,$8D,$AC,$A5,$8D,$8B,$84,$A3,$A3,$AC,$A9,$8E,$A5,$AC,$CB,$A0,$A5,$A3,$87,$AC,$D6,$D6,$A3,$A7,$88,$A4,$82,$87,$AC,$8E,$8D,$AC,$CB,$A4,$87,$84,$AC,$82,$8E,$A5,$8D,$A4,$AC,$8E,$85,$AC,$A4,$87,$A2,$84,$84,$2A,$AC,$CF,$D6,$61,$48,$AC,$A3,$87,$8E,$A5,$A4,$2B,$AC,$A0,$A5,$A3,$87,$AC,$CB,$A4,$87,$84,$AC,$A3,$A7,$88,$A4,$82,$87,$2A,$AC,$CF,$D6,$1F,$82,$8E,$A5,$8D,$A4,$AC,$21,$2B,$AC,$22,$2B,$AC,$23,$2A,$CB,$D6,$0D,$D7,$84,$80,$AC,$8C,$88,$A3,$A4,$80,$8A,$84,$2A,$C0

;org $89BEFC
S_89BEFC:
lda $09A2 : clc : adc #$0007 : sta $14
lda $09A4 : sec : sbc #$0020 : sta $16
rts

;org $89BF0F
db $0F,$01,$01
ECBridgeButton:
lda $0AD4 : bne +
  lda #$0200 : tsb $10    ; Ignore Will.
+:
cop #$BC : db $02, $00
lda #$AD08 : sta $7F0020,x
lda #$0031 : tsb $12
cop #$88 : dl $8EE000
lda #$00FF : sta $7F0026,x
.AwaitAttack:
cop #$58 : dw .HandleAttack
cop #$80 : db $0F
cop #$89
cop #$C4 : dl .AwaitAttack
.HandleAttack:    ; org $89bf46
cop #$80 : db $11
cop #$89
cop #$D1 : dw $0114 : db $01 : dw .Sleep
cop #$08 : db $0F, $0F
cop #$32 : db $14
cop #$33
cop #$CD : dw $0114
cop #$32 : db $15
cop #$33
cop #$CD : dw $0115
; org $89bf68
.Sleep:
cop #$C1
rtl


;org $89BF6B
db $00,$00,$23
ECDarkSpaceSpawner:
cop #$D1 : dw $0116 : db $01 : dw .DoSpawn    ; $BF7D
cop #$D3 : dw $0116 : db $01
cop #$DA : db $B3
.DoSpawn:
cop #$A0 : dl EDarkSpace_Spawned : dw $00A8,$04C0 : dw $0B00
lda #$0001 : sta $0024,y
cop #$E0

;org $89BF90
db $22,$00,$10
ECLilyEnd:



org $89C06C
db $C2,$0B,$D6,$61,$A4,$87,$84,$AC,$D6,$8C,$80,$A2,$84,$AC,$CB,$83,$84,$A3,$A4,$A2,$8E,$A9,$84,$83,$2B,$CB,$67,$88,$8B,$8B,$AC,$82,$80,$8D,$AC,$A2,$84,$A4,$A5,$A2,$8D,$AC,$A4,$8E,$CB,$87,$88,$A3,$AC,$D6,$C0

;org $89C09F

org $89C0A8
db $D3,$C2,$02,$46,$88,$A2,$8B,$2F,$AC,$48,$AC,$A3,$80,$A7,$AC,$A9,$8E,$A5,$4F,$4F,$CB,$41,$A5,$A4,$AC,$48,$0E,$8C,$AC,$A3,$A5,$A2,$A0,$A2,$88,$A3,$84,$83,$4F,$CB,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$82,$87,$80,$8D,$86,$84,$CB,$D6,$FE,$D7,$A3,$D6,$A5,$8C,$84,$4F,$CF,$48,$0E,$8C,$AC,$4B,$88,$8B,$8B,$A9,$2A,$AC,$40,$8D,$AC,$48,$A4,$8E,$A2,$A9,$AC,$CB,$D7,$6C,$A0,$A2,$8E,$A4,$84,$82,$A4,$84,$83,$AC,$81,$A9,$AC,$CB,$A4,$87,$84,$AC,$45,$8B,$8E,$A7,$84,$A2,$AC,$63,$A0,$88,$A2,$88,$A4,$2A,$AC,$CF,$47,$8E,$A7,$2A,$2A,$2A,$AC,$47,$8E,$A7,$AC,$83,$8E,$AC,$A9,$8E,$A5,$AC,$8A,$8D,$8E,$A7,$CB,$80,$AC,$D6,$B4,$A9,$8E,$A5,$AC,$D6,$7A,$8E,$8D,$8B,$A9,$CB,$D6,$98,$D6,$99,$D6,$8E,$A5,$A3,$0D,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$48,$AC,$8B,$84,$80,$A2,$8D,$84,$83,$AC,$88,$A4,$AC,$CB,$D6,$8E,$D6,$17,$4B,$8E,$8B,$80,$2A,$AC,$CB,$63,$87,$84,$AC,$87,$A5,$8C,$8C,$84,$83,$AC,$88,$A4,$AC,$A7,$87,$84,$8D,$84,$A6,$84,$A2,$AC,$CB,$A3,$87,$84,$AC,$A7,$80,$A3,$AC,$A5,$A0,$A3,$84,$A4,$2A,$AC,$CF,$C2,$02,$D6,$2A,$48,$AC,$D6,$98,$87,$80,$83,$AC,$CB,$D6,$D0,$8E,$85,$AC,$87,$84,$A2,$AC,$A0,$88,$84,$2A,$AC,$48,$A4,$AC,$CB,$A4,$80,$A3,$A4,$84,$A3,$AC,$A2,$80,$A4,$87,$84,$A2,$AC,$A5,$8D,$A5,$A3,$A5,$80,$8B,$2B,$CB,$D6,$84,$88,$A4,$0D,$AC,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$69,$8E,$A5,$AC,$D6,$A4,$AC,$CB,$8C,$A9,$AC,$86,$A2,$80,$8D,$83,$8C,$8E,$A4,$87,$84,$A2,$0D,$4F,$AC,$CF,$C2,$02,$D6,$2A,$40,$82,$A4,$A5,$80,$8B,$8B,$A9,$2B,$CB,$A3,$87,$84,$AC,$80,$A3,$8A,$84,$83,$AC,$8C,$84,$AC,$A4,$8E,$CB,$A2,$84,$A3,$82,$A5,$84,$AC,$A9,$8E,$A5,$4F,$C3,$00,$C0
;org $89C226
db $D3,$C2,$02,$4B,$88,$8B,$8B,$A9,$2F,$CB,$64,$87,$84,$AC,$D7,$0A,$88,$A3,$AC,$82,$80,$8B,$8B,$88,$8D,$86,$2A,$2A,$2A,$CB,$48,$AC,$D6,$98,$A4,$8E,$AC,$86,$8E,$2A,$CF,$D6,$2A,$CB,$D7,$3E,$D7,$87,$80,$86,$80,$88,$8D,$4F,$AC,$CB,$46,$8E,$8E,$83,$81,$A9,$84,$2B,$AC,$67,$88,$8B,$8B,$4F,$C3,$00,$C0

;org $89C26F

org $89C285
db $D3,$C2,$00,$64,$87,$84,$A2,$84,$0E,$A3,$AC,$D6,$C8,$8E,$8D,$AC,$A4,$87,$84,$CB,$D6,$96,$A4,$87,$84,$A2,$84,$2A,$2A,$2A,$CF,$C3,$00,$48,$85,$AC,$48,$AC,$82,$80,$8D,$AC,$D6,$B5,$D6,$D7,$86,$8E,$8B,$83,$AC,$CB,$A3,$A4,$80,$A4,$A5,$84,$2B,$AC,$48,$AC,$82,$80,$8D,$AC,$A0,$80,$A3,$A3,$2A,$2A,$2A,$AC,$C0

;org $89C2D0
; Unused, would have been a proximity-triggered falling wall block.
db $18 : dw $2300
cop #$C1
cop #$21 : db $02 : dw EMPFallingBlockWall   ; $c2db
rtl

;org $89c2db
EMPFallingBlockWall:
lda #$0000 : sta $7F0010,x
bra +
EMPFallingBlockFloor:    ; org $89c2e4
lda #$0001 : sta $7F0010,x
+:
cop #$BC : db $08, $00
cop #$9C : dl EMPFallingBlockShadow : dw $0301
lda $16 : sec : sbc #$0100 : sta $16
lda #$2000 : trb $10
cop #$B2
cop #$86 : db $18, $02, $0F
cop #$8A
cop #$08 : db $15, $15
cop #$B4
lda #$0100 : trb $10
cop #$82 : db $18, $35
cop #$89
lda #$0100 : tsb $10
cop #$B3
lda $7F0010,x : bne +   ; Is 1 if new floor, 0 if new wall.
cop #$0B
bra ++
+:    ; org $89c32e
cop #$11
++:    ; org $89c330
cop #$C1
rtl
EMPFallingBlockShadow:    ; org $89c333
cop #$84 : db $1F, $03
cop #$8A
cop #$E0

;org $89c33b
db $18 : dw $2300
EMPFallingBlockInDiamondBlockRoom:
cop #$BC : db $08, $00
cop #$D0 : db $2F, $01 : dw .DoneFalling
cop #$D2 : db $2F, $01
lda #$CFF0 : tsb $065A
cop #$DA : db $3B
cop #$08 : db $15, $15
cop #$9C : dl ESimpleScreenShake : dw $2000
cop #$DA : db $B3
cop #$23 : sta $08
cop #$C2
lda $16 : sec : sbc #$0100 : sta $16
lda #$2000 : trb $10
cop #$B2
cop #$86 : db $18, $02, $0F
cop #$8A
cop #$08 : db $15, $15
cop #$B4
cop #$82 : db $18, $35
cop #$89
bra .DoneFalling    ; yes, really bra $00
.DoneFalling:
lda #$2000 : trb $10
cop #$B3
cop #$11
lda #$CFF0 : trb $065A
cop #$C1
rtl
warnpc $89c39f



org $89C410
db $D3,$63,$A4,$84,$A0,$A0,$88,$8D,$86,$AC,$8E,$8D,$AC,$80,$AC,$86,$8E,$8B,$83,$AC,$CB,$A4,$88,$8B,$84,$AC,$84,$8C,$88,$A4,$A3,$AC,$80,$AC,$A3,$8E,$A5,$8D,$83,$2A,$AC,$CF,$64,$87,$84,$A2,$84,$AC,$80,$A2,$84,$CB,$85,$8E,$A5,$A2,$AC,$86,$8E,$8B,$83,$AC,$A4,$88,$8B,$84,$A3,$2A,$AC,$CF,$63,$A4,$80,$8D,$83,$AC,$8E,$8D,$AC,$84,$80,$82,$87,$AC,$8E,$85,$AC,$A4,$87,$84,$CB,$85,$8E,$A5,$A2,$AC,$A4,$88,$8B,$84,$A3,$AC,$80,$A4,$AC,$A4,$87,$84,$AC,$A3,$80,$8C,$84,$CB,$A4,$88,$8C,$84,$2A,$AC,$C0

;org $89C489

org $89c4b2
db $00 : dw $3000
EMPBossExteriorWindListener:
cop #$C2
lda $09A4 : cmp #$0110 : bcs .StopBreeze
.StartBreeze:   ; Ambient hair tossing.
cop #$CC : db $00
bra +
.StopBreeze:
cop #$CE : db $00
+:
cop #$D0 : db $30, $00 : dw EMPBossExteriorWindListener
cop #$D0 : db $31, $00 : dw EMPBossExteriorWindListener
cop #$CC : db $00
cop #$08 : db $16, $16
.StatuesPlacedAwaitPlayerPos:    ; org $89c4da
cop #$C1
cop #$28 : db $E8, $01, $20, $01 : dw .SpawnWind
cop #$28 : db $E7, $01, $20, $01 : dw .SpawnWind
rtl
.SpawnWind:    ; org $89c4ed
lda #$EFF0 : tsb $065A
cop #$08 : db $16, $16
cop #$CA : db $28
cop #$9C : dl EMPBossExteriorWindParticle : dw $1000
cop #$C3 : dl .PostParticle : dw $0008
.PostParticle:    ; org $89c508
cop #$CB
.PushPlayerAndReturn:
lda #$FFF8 : sta $09B2
lda #$EFF0 : trb $065A
cop #$DA : db $3B
bra .StatuesPlacedAwaitPlayerPos

EMPBossExteriorWindParticle:    ; org $89c51b
lda #$02A0 : sta $14
cop #$23 : clc : adc #$0090 : sta $16
cop #$23 : and #$0003 : beq .Sprite1B
dec : beq .Sprite1C
.Sprite1A:
cop #$85 : db $1A, $40, $0C
cop #$8A
cop #$E0
.Sprite1B:    ; org $89c53b
cop #$85 : db $1B, $40, $0E
cop #$8A
cop #$E0
.Sprite1C:    ; org $89c544
cop #$85 : db $1C, $40, $10
cop #$8A
cop #$E0
warnpc $89c54d


org $89C5D5
db $C2,$10,$64,$87,$84,$AC,$D7,$C5,$88,$8D,$AC,$A4,$87,$84,$AC,$A6,$80,$8B,$8B,$84,$A9,$CB,$A0,$8B,$80,$A9,$A3,$AC,$80,$AC,$8C,$84,$8B,$8E,$83,$A9,$2A,$CB,$64,$87,$84,$AC,$D6,$C9,$D6,$CC,$A4,$8E,$CB,$81,$84,$AC,$A3,$88,$8D,$86,$88,$8D,$86,$2A,$2A,$2A,$C0
;org $89C614
db $C1,$03,$11,$C7,$0D,$03,$D6,$67,$8B,$84,$80,$A2,$8D,$84,$83,$AC,$A4,$87,$84,$CB,$D6,$34,$8E,$85,$AC,$A4,$87,$84,$AC,$67,$88,$8D,$83,$4F,$C0
;org $89C637
db $C1,$03,$11,$C7,$0D,$03,$69,$8E,$A5,$AC,$82,$80,$8D,$AC,$D6,$9B,$A4,$87,$84,$AC,$D6,$34,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$67,$88,$8D,$83,$2A,$AC,$41,$A5,$A4,$AC,$D6,$FE,$CB,$D6,$A0,$88,$A3,$AC,$85,$A5,$8B,$8B,$2A,$AC,$C0

;org $89C66E
db $00,$00,$23
EGoldenTileListener:
cop #$D1 : dw $0112 : db $01 : dw .Die
.WaitLoop:
lda #$0258 : sta $7f0010,x
cop #$C1
cop #$45 : db $14,$17, $17,$1a : dw .DecCounter
cop #$C4 : dl .WaitLoop
.DecCounter:
lda $7f0010,x : dec : beq .OpenDoor
  sta $7f0010,x
  rtl
.OpenDoor:
cop #$08 : db $0f,$0f
cop #$32 : db $12
cop #$33
cop #$CD : dw $0112
.Die:
cop #$E0

;org $89c6a9
db $00 : dw $2000
EMP28TileListener:
cop #$C1
.Main:    ; org $89c6ae
cop #$45 : db $1A, $0C, $1C, $0E : dw .Tile1
cop #$45 : db $1A, $16, $1C, $18 : dw .Tile2
cop #$45 : db $12, $24, $14, $26 : dw .Tile3
cop #$45 : db $08, $24, $0A, $26 : dw .Tile4
cop #$45 : db $10, $1C, $12, $1E : dw .Tile5
cop #$45 : db $12, $16, $14, $18 : dw .Tile6
.DoNothing:
rtl
.SoundAndReturn:    ; org $89c6df
cop #$08 : db $2C, $2C
cop #$C4 : dl .Main
.Tile1:    ; org $89c6e8
cop #$D0 : db $01, $01 : dw .DoNothing
cop #$CC : db $01
cop #$A0 : dl EMPFallingBlockWall : dw $01A8, $0130, $2300
bra .SoundAndReturn
.Tile2:    ; org $89c6fe
cop #$D0 : db $02, $01 : dw .DoNothing
cop #$CC : db $02
cop #$A0 : dl EMPFallingBlockWall : dw $01C8, $01C0, $2300
bra .SoundAndReturn
.Tile3:    ; org $89c714
cop #$D0 : db $03, $01 : dw .DoNothing
cop #$CC : db $03
cop #$A0 : dl EMPFallingBlockWall : dw $00E8, $0260, $2300
bra .SoundAndReturn
.Tile4:    ; org $89c72a
cop #$D0 : db $04, $01 : dw .DoNothing
cop #$CC : db $04
cop #$A0 : dl EMPFallingBlockFloor : dw $0088, $0220, $2300
cop #$DA : db $0E
cop #$A0 : dl EMPFallingBlockFloor : dw $0088, $0200, $2300
bra .SoundAndReturn
.Tile5:    ; org $89c74e
cop #$D0 : db $05, $01 : dw .DoNothing
cop #$CC : db $05
cop #$A0 : dl EMPFallingBlockFloor : dw $0088, $01C0, $2300
cop #$DA : db $0E
cop #$A0 : dl EMPFallingBlockFloor : dw $0088, $01A0, $2300
jmp .SoundAndReturn
.Tile6:    ; org $89c773
cop #$D0 : db $06, $01 : dw .DoNothing
cop #$CC : db $06
cop #$A0 : dl EMPFallingBlockFloor : dw $0128, $0160, $2300
cop #$DA : db $0E
cop #$A0 : dl EMPFallingBlockFloor : dw $0128, $0140, $2300
jmp .SoundAndReturn



org $89C7AE
db $D3,$C2,$00,$40,$8D,$AC,$D6,$8A,$A7,$87,$8E,$AC,$A3,$8E,$A5,$86,$87,$A4,$AC,$CB,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$D6,$19,$63,$87,$88,$A0,$2A,$2A,$2A,$0D,$AC,$CF,$48,$8D,$AC,$A4,$87,$84,$AC,$A3,$8A,$84,$8B,$84,$A4,$8E,$8D,$0E,$A3,$AC,$87,$80,$8D,$83,$CB,$88,$A3,$AC,$D6,$D0,$8A,$88,$8D,$83,$AC,$8E,$85,$AC,$82,$87,$80,$A2,$8C,$2A,$CF,$C9,$28,$48,$8D,$A3,$88,$83,$84,$AC,$88,$A4,$AC,$88,$A3,$AC,$80,$AC,$A3,$82,$A2,$80,$A0,$AC,$8E,$85,$CB,$A0,$80,$A0,$84,$A2,$AC,$D6,$F0,$A4,$87,$88,$A3,$CB,$D7,$C3,$8E,$8D,$AC,$88,$A4,$2A,$CF,$C3,$00,$D2,$00,$45,$80,$A4,$87,$84,$A2,$2B,$AC,$D7,$8E,$D6,$79,$CB,$D6,$73,$80,$8B,$88,$A6,$84,$2A,$AC,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$4D,$80,$8D,$80,$AC,$AC,$CF,$D6,$61,$A9,$8E,$A5,$AC,$D6,$90,$A4,$87,$84,$AC,$D6,$19,$CB,$63,$87,$88,$A0,$2B,$AC,$81,$A5,$A9,$AC,$80,$AC,$4A,$A2,$A5,$8A,$2A,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$63,$80,$81,$80,$A3,$AC,$C0

;org $89C89D

org $89C8B3
db $D3,$C2,$00,$40,$8D,$AC,$D6,$8A,$A7,$87,$8E,$AC,$A3,$8E,$A5,$86,$87,$A4,$AC,$CB,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$D6,$19,$63,$87,$88,$A0,$2A,$2A,$2A,$0D,$AC,$CF,$47,$84,$AC,$D7,$7A,$87,$88,$A3,$AC,$D6,$B0,$88,$8D,$AC,$CB,$80,$AC,$A4,$A2,$80,$A0,$2A,$2A,$2A,$AC,$C0

;org $89C8F7

org $89C90D
db $D3,$C2,$00,$64,$87,$84,$A2,$84,$0E,$A3,$AC,$D6,$D0,$8A,$88,$8D,$83,$CB,$8E,$85,$AC,$89,$8E,$A5,$A2,$8D,$80,$8B,$2A,$2A,$2A,$CF,$C3,$00,$CB,$AC,$AC,$4D,$8E,$A4,$84,$AC,$D6,$6B,$A4,$87,$84,$AC,$48,$8D,$82,$80,$A3,$CF,$64,$87,$84,$A9,$AC,$D6,$98,$8D,$8E,$AC,$A7,$A2,$88,$A4,$A4,$84,$8D,$CB,$D7,$7B,$64,$87,$84,$A9,$0E,$A6,$84,$AC,$8B,$84,$85,$A4,$CB,$D6,$E1,$8B,$84,$86,$84,$8D,$83,$A3,$AC,$88,$8D,$AC,$A3,$8E,$A5,$8D,$83,$2A,$CF,$48,$AC,$D6,$98,$A3,$A5,$82,$82,$84,$84,$83,$84,$83,$AC,$88,$8D,$AC,$CB,$83,$84,$82,$88,$A0,$87,$84,$A2,$88,$8D,$86,$AC,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$CB,$D6,$34,$8E,$85,$AC,$A4,$87,$84,$AC,$67,$88,$8D,$83,$2A,$AC,$CF,$2D,$42,$87,$80,$8D,$A4,$AC,$88,$8D,$AC,$A4,$87,$84,$AC,$46,$8E,$8B,$83,$84,$8D,$CB,$62,$8E,$8E,$8C,$2A,$2E,$AC,$43,$8E,$84,$A3,$AC,$A4,$87,$80,$A4,$CB,$8C,$84,$80,$8D,$AC,$A4,$8E,$AC,$A0,$8B,$80,$A9,$AC,$A4,$87,$84,$AC,$4C,$84,$8B,$8E,$83,$A9,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$67,$88,$8D,$83,$2A,$2A,$2A,$0D,$C0

;org $89C9FF

org $89CAE5
db $C1,$03,$11,$C7,$0D,$04,$C2,$02,$D6,$2A,$47,$84,$A2,$84,$0E,$A3,$AC,$A4,$87,$84,$CB,$84,$8D,$A4,$A2,$80,$8D,$82,$84,$AC,$A4,$8E,$AC,$A4,$87,$84,$AC,$A2,$A5,$88,$8D,$A3,$2A,$CF,$64,$87,$84,$A9,$AC,$A3,$80,$A9,$AC,$D6,$D7,$D6,$D6,$88,$A3,$AC,$CB,$D6,$F4,$A4,$87,$84,$AC,$A0,$A5,$AA,$AA,$8B,$84,$AC,$8E,$85,$AC,$A4,$87,$84,$AC,$CB,$48,$8D,$82,$80,$8D,$AC,$8B,$84,$86,$84,$8D,$83,$AC,$88,$A3,$AC,$87,$88,$83,$83,$84,$8D,$2A,$AC,$CF,$48,$AC,$D6,$99,$D6,$D6,$A3,$A4,$8E,$A2,$A9,$AC,$85,$A2,$8E,$8C,$CB,$A4,$87,$84,$AC,$D7,$0A,$A7,$87,$84,$8D,$CB,$48,$AC,$A7,$80,$A3,$AC,$80,$AC,$82,$87,$88,$8B,$83,$2A,$2A,$2A,$CF,$40,$85,$A4,$84,$A2,$AC,$D6,$77,$88,$8D,$A6,$80,$83,$84,$83,$2B,$AC,$A4,$87,$84,$CB,$48,$8D,$82,$80,$A3,$AC,$83,$84,$82,$88,$83,$84,$83,$AC,$A4,$8E,$AC,$8B,$84,$80,$A6,$84,$CB,$D6,$E1,$8D,$80,$A4,$88,$A6,$84,$AC,$8B,$80,$8D,$83,$AC,$A4,$8E,$CB,$D6,$90,$80,$AC,$8D,$84,$A7,$AC,$A7,$8E,$A2,$8B,$83,$2A,$CF,$64,$87,$84,$A9,$AC,$A3,$84,$82,$A2,$84,$A4,$8B,$A9,$AC,$81,$A5,$88,$8B,$A4,$CB,$80,$AC,$D6,$9C,$A3,$87,$88,$A0,$AC,$80,$8D,$83,$AC,$85,$88,$8B,$8B,$84,$83,$CB,$88,$A4,$AC,$D6,$F0,$A0,$A2,$88,$82,$84,$8B,$84,$A3,$A3,$CB,$86,$8E,$8B,$83,$AC,$80,$A2,$A4,$88,$85,$80,$82,$A4,$A3,$2A,$CF,$41,$A5,$A4,$AC,$D6,$DB,$8D,$8E,$AC,$A2,$84,$82,$8E,$A2,$83,$AC,$8E,$85,$CB,$A4,$87,$84,$AC,$A3,$87,$88,$A0,$AC,$8B,$84,$80,$A6,$88,$8D,$86,$2A,$2A,$2A,$CF,$64,$87,$80,$A4,$0E,$A3,$AC,$D7,$8F,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$CB,$D6,$19,$63,$87,$88,$A0,$AC,$88,$8D,$AC,$A4,$87,$84,$AC,$A3,$A4,$8E,$A2,$A9,$2A,$AC,$CF,$48,$AC,$D6,$82,$D6,$DA,$A4,$87,$84,$AC,$44,$8B,$83,$84,$A2,$CB,$87,$80,$A3,$AC,$D7,$5D,$A4,$8E,$8B,$83,$AC,$D6,$D7,$A3,$A4,$8E,$A2,$A9,$CB,$A4,$8E,$AC,$80,$8D,$A9,$AC,$8E,$A5,$A4,$A3,$88,$83,$84,$A2,$2A,$CF,$48,$AC,$D6,$F9,$D6,$F7,$87,$84,$AC,$A7,$80,$8D,$A4,$A3,$CB,$A9,$8E,$A5,$AC,$A4,$8E,$AC,$83,$8E,$2A,$2A,$2A,$C3,$00,$C0

;org $89CCB3

org $89CCD0
db $C1,$03,$06,$C7,$0D,$03,$C2,$02,$D6,$2A,$67,$87,$A9,$AC,$80,$A2,$84,$AC,$A9,$8E,$A5,$AC,$88,$8D,$AC,$80,$CB,$D7,$90,$D6,$A5,$A4,$87,$88,$A3,$4F,$CB,$D6,$1D,$83,$80,$8D,$86,$84,$A2,$8E,$A5,$A3,$4F,$CF,$C2,$01,$D6,$25,$4B,$8E,$8B,$80,$AC,$A4,$8E,$8B,$83,$AC,$8C,$84,$AC,$CB,$D6,$6B,$D6,$D6,$A0,$8B,$80,$82,$84,$2A,$AC,$D6,$20,$CB,$D6,$70,$A7,$80,$88,$A4,$88,$8D,$86,$4F,$AC,$CF,$48,$AC,$D6,$D8,$A9,$8E,$A5,$0E,$83,$AC,$8B,$84,$85,$A4,$CB,$8C,$84,$2A,$AC,$69,$8E,$A5,$AC,$D6,$CA

;org $89CD47

org $89CE01
db $C1,$03,$06,$C7,$0D,$04,$C2,$02,$D6,$2A,$CB,$67,$88,$8B,$8B,$2A,$AC,$48,$AC,$A2,$84,$8C,$84,$8C,$81,$84,$A2,$AC,$D6,$F7,$CB,$A4,$87,$84,$AC,$D7,$0A,$A3,$80,$88,$83,$2A,$AC,$CF,$2D,$60,$A5,$A4,$AC,$A4,$87,$84,$AC,$D6,$C9,$8E,$8D,$AC,$A4,$87,$84,$AC,$CB,$D7,$19,$42,$8B,$88,$85,$85,$AC,$81,$84,$8B,$8E,$A7,$AC,$A4,$87,$84,$AC,$CB,$D7,$9A,$D6,$F4,$A4,$87,$84,$AC,$A3,$A0,$88,$A2,$88,$A4,$A3,$0E,$CB,$D7,$4B,$82,$80,$8D,$8D,$8E,$A4,$AC,$A2,$84,$80,$82,$87,$2A,$AC,$CF,$64,$87,$84,$AC,$A6,$80,$8B,$8B,$84,$A9,$AC,$D7,$C5,$D6,$EF,$CB,$8B,$84,$80,$83,$AC,$A9,$8E,$A5,$AC,$A4,$8E,$AC,$A4,$87,$84,$AC,$CB,$D6,$19,$63,$87,$88,$A0,$2E,$2A,$AC,$AC,$C3,$00,$C0

;org $89CEA3

org $89CF19
db $C1,$03,$06,$C7,$0D,$03,$C2,$01,$D6,$25,$D6,$69,$A3,$8E,$AC,$8C,$84,$80,$8D,$4F,$4F,$AC,$CB,$4B,$84,$80,$A6,$88,$8D,$86,$AC,$8C,$84,$AC,$81,$84,$87,$88,$8D,$83,$4F,$AC,$47,$8E,$A7,$AC,$CB,$D6,$7A,$A9,$8E,$A5,$AC,$83,$8E,$AC,$A4,$87,$80,$A4,$4F,$C3,$00,$C0
;org $89CF59
db $C1,$03,$06,$C7,$0D,$03,$C2,$01,$D6,$25,$67,$84,$8B,$8B,$0D,$AC,$43,$88,$83,$AC,$A9,$8E,$A5,$AC,$CB,$D6,$90,$D6,$F7,$A9,$8E,$A5,$AC,$D6,$F2,$CB,$D6,$AB,$85,$8E,$A2,$0D,$C3,$00,$C0

;org $89CF86

org $89CFED
db $C2,$0A,$40,$85,$A4,$84,$A2,$AC,$A4,$87,$84,$AC,$83,$84,$8C,$8E,$8D,$AC,$CB,$83,$88,$A3,$80,$A0,$A0,$84,$80,$A2,$A3,$2B,$AC,$67,$88,$8B,$8B,$AC,$A2,$84,$A4,$A5,$A2,$8D,$A3,$CB,$A4,$8E,$AC,$87,$88,$A3,$AC,$D6,$C0

;org $89D022

org $89D04C
db $C2,$0E,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$64,$87,$84,$A2,$84,$AC,$A7,$80,$A3,$AC,$80,$AC,$CB,$A4,$A2,$84,$8C,$84,$8D,$83,$8E,$A5,$A3,$AC,$D7,$C5,$80,$A4,$AC,$A4,$87,$84,$AC,$CB,$D7,$19,$42,$8B,$88,$85,$85,$2A,$AC,$CF,$64,$87,$80,$A4,$0E,$A3,$AC,$D7,$8F,$D6,$F7,$A4,$87,$84,$AC,$CB,$8E,$8B,$83,$AC,$8C,$80,$8D,$AC,$8C,$84,$80,$8D,$A4,$AC,$81,$A9,$AC,$A4,$87,$84,$AC,$CB,$D7,$4B,$8E,$85,$AC,$A4,$87,$84,$AC,$A3,$A0,$88,$A2,$88,$A4,$A3,$2A,$2A,$2A,$2A,$AC,$CF,$64,$87,$88,$A3,$AC,$88,$A3,$AC,$A4,$87,$84,$AC,$82,$8B,$88,$85,$85,$AC,$A7,$88,$A4,$87,$CB,$8D,$8E,$AC,$A7,$88,$8D,$83,$2A,$AC,$4C,$A9,$AC,$87,$84,$80,$A2,$A4,$CB,$81,$84,$80,$A4,$A3,$AC,$85,$80,$A3,$A4,$2A,$C3,$00,$C0

;org $89D0F5

org $89D1FC
db $D3,$D6,$46,$66,$8E,$88,$82,$84,$2F,$CB,$46,$8E,$8E,$83,$AC,$84,$A6,$84,$8D,$88,$8D,$86,$2A,$2A,$2A,$2A,$CB,$4E,$A5,$A4,$AC,$85,$8E,$A2,$AC,$80,$AC,$A3,$A4,$A2,$8E,$8B,$8B,$0D,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$CB,$67,$87,$8E,$AC,$88,$A3,$AC,$88,$A4,$0D,$AC,$CF,$C3,$00,$D6,$46,$66,$8E,$88,$82,$84,$2F,$CB,$65,$A0,$2B,$AC,$A5,$A0,$2A,$AC,$64,$87,$88,$A3,$AC,$81,$8E,$83,$A9,$CB,$88,$A3,$AC,$8B,$88,$86,$87,$A4,$84,$A2,$AC,$D7,$B5,$80,$88,$A2,$2A,$CF,$C3,$04,$67,$88,$8B,$8B,$2F,$AC,$CB,$D6,$62,$80,$A2,$84,$AC,$A9,$8E,$A5,$0D,$AC,$CF,$C3,$00,$D6,$46,$66,$8E,$88,$82,$84,$2F,$AC,$46,$A5,$84,$A3,$A3,$AC,$A7,$87,$8E,$0D,$AC,$CB,$AC,$42,$8E,$A4,$A4,$8E,$8D,$AC,$82,$80,$8D,$83,$A9,$0E,$A3,$AC,$A2,$84,$8B,$80,$A4,$88,$A6,$84,$CB,$AC,$41,$88,$A2,$83,$AC,$8C,$80,$8D,$CB,$AC,$4E,$8B,$83,$AC,$8C,$80,$8D,$0E,$A3,$AC,$86,$87,$8E,$A3,$A4,$2A,$2A,$2A,$CA
;org $89D2D0
db $CE,$D6,$46,$66,$8E,$88,$82,$84,$2F,$AC,$67,$A2,$8E,$8D,$86,$4F,$CB,$D7,$01,$A7,$84,$AC,$80,$A2,$84,$AC,$A4,$87,$84,$AC,$CB,$D6,$31,$64,$A2,$88,$81,$84,$2B,$AC,$D7,$48,$CB,$8A,$8D,$8E,$A7,$8D,$AC,$80,$A3,$AC,$2D,$63,$87,$80,$83,$8E,$A7,$A3,$2A,$2E,$C0
;org $89D30F
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$CB,$67,$87,$84,$A2,$84,$A6,$84,$A2,$AC,$D6,$DB,$8B,$88,$86,$87,$A4,$2B,$CB,$D6,$D9,$80,$A2,$84,$AC,$A3,$87,$80,$83,$8E,$A7,$A3,$2A,$CF,$67,$84,$2B,$AC,$A7,$87,$8E,$AC,$D6,$F2,$D6,$7F,$81,$A9,$CB,$D6,$77,$81,$80,$A4,$87,$84,$83,$AC,$88,$8D,$AC,$A4,$87,$84,$CB,$D6,$A8,$D7,$89,$8E,$8D,$82,$84,$2A,$2A,$2A,$CF,$D6,$EF,$A3,$A0,$84,$8D,$83,$AC,$8E,$A5,$A2,$AC,$85,$A5,$A4,$A5,$A2,$84,$AC,$88,$8D,$CB,$80,$AC,$D6,$F5,$D6,$F8,$8B,$88,$86,$87,$A4,$2A,$C0
;org $89D388
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$AC,$64,$87,$84,$AC,$D6,$7B,$88,$A3,$CB,$80,$AC,$A6,$84,$87,$88,$82,$8B,$84,$AC,$8E,$85,$AC,$83,$84,$A3,$A4,$A2,$A5,$82,$A4,$88,$8E,$8D,$CB,$A7,$87,$8E,$A3,$84,$AC,$84,$A6,$88,$8B,$AC,$D6,$A8,$87,$80,$A3,$CB,$D6,$7F,$80,$8B,$8B,$AC,$82,$A2,$84,$80,$A4,$A5,$A2,$84,$A3,$2A,$CF,$D6,$31,$64,$A2,$88,$81,$84,$2F,$CB,$D6,$1D,$80,$AC,$A2,$84,$8C,$8D,$80,$8D,$A4,$AC,$8E,$85,$AC,$80,$CB,$A7,$84,$80,$A0,$8E,$8D,$AC,$D6,$8E,$80,$AC,$A4,$84,$A2,$A2,$88,$81,$8B,$84,$CB,$81,$80,$A4,$A4,$8B,$84,$AC,$D6,$A6,$80,$86,$8E,$2A,$CF,$C2,$00,$67,$88,$8B,$8B,$2F,$AC,$64,$87,$84,$AC,$D6,$F5,$CB,$D6,$EF,$81,$84,$AC,$A5,$8D,$81,$84,$80,$A2,$80,$81,$8B,$84,$0D,$AC,$CF,$C3,$00,$D6,$31,$64,$A2,$88,$81,$84,$2F,$AC,$CB,$69,$84,$A3,$2A,$AC,$D6,$69,$81,$A2,$88,$86,$87,$A4,$2B,$AC,$81,$A5,$A4,$AC,$CB,$D6,$FF,$D6,$D3,$88,$8C,$8C,$80,$A4,$A5,$A2,$84,$2A,$AC,$C0
;org $89D462
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$AC,$4E,$8D,$84,$AC,$8E,$85,$AC,$8C,$A9,$AC,$AC,$CB,$A0,$80,$A2,$A4,$A9,$AC,$87,$80,$A3,$AC,$D6,$70,$8A,$88,$83,$8D,$80,$A0,$A0,$84,$83,$2A,$AC,$CF,$4A,$8D,$8E,$A7,$AC,$D6,$FE,$83,$84,$A3,$A4,$88,$8D,$80,$A4,$88,$8E,$8D,$0D,$CB,$AC,$69,$84,$A3,$CB,$AC,$4D,$8E,$CA
;org $89D4AD
db $CE,$D6,$31,$64,$A2,$88,$81,$84,$2F,$CB,$D6,$30,$A3,$8E,$8C,$84,$8E,$8D,$84,$0E,$A3,$AC,$82,$87,$80,$A3,$88,$8D,$86,$CB,$D7,$C7,$4A,$A5,$AC,$8A,$A5,$AC,$8A,$A5,$AC,$2A,$2A,$2A,$2A,$2A,$C0
;org $89D4DC
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$AC,$48,$A4,$AC,$82,$8E,$8C,$84,$A3,$AC,$CB,$8E,$8D,$82,$84,$AC,$84,$A6,$84,$A2,$A9,$AC,$28,$20,$20,$AC,$A9,$84,$80,$A2,$A3,$2A,$AC,$CB,$64,$87,$88,$A3,$AC,$88,$A3,$AC,$A4,$87,$84,$AC,$85,$8E,$A5,$A2,$A4,$87,$AC,$A4,$88,$8C,$84,$2A,$CF,$64,$87,$84,$AC,$D6,$B7,$D6,$A8,$A4,$87,$80,$A4,$CB,$A2,$84,$80,$82,$87,$84,$A3,$AC,$A9,$8E,$A5,$2B,$CB,$A4,$87,$84,$AC,$A3,$A4,$A2,$8E,$8D,$86,$84,$A2,$AC,$A4,$87,$84,$AC,$D6,$0C,$CB,$60,$8E,$A7,$84,$A2,$2A,$CF,$D6,$62,$D6,$EF,$81,$84,$AC,$81,$8E,$A2,$8D,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$D6,$A8,$D6,$D6,$A4,$88,$8C,$84,$2A,$2A,$2A,$C0
;org $89D574
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$CB,$D7,$41,$A4,$A2,$80,$8D,$A3,$82,$84,$8D,$83,$84,$83,$AC,$A4,$88,$8C,$84,$2B,$CB,$80,$8D,$83,$AC,$D6,$98,$8B,$88,$A6,$84,$83,$AC,$8B,$8E,$8D,$86,$2A,$2A,$2A,$CF,$67,$84,$AC,$A3,$80,$A7,$AC,$A4,$87,$84,$AC,$83,$84,$A3,$A4,$A2,$A5,$82,$A4,$88,$8E,$8D,$AC,$CB,$8E,$85,$AC,$A4,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$44,$8C,$A0,$88,$A2,$84,$2A,$AC,$CF,$64,$87,$84,$AC,$48,$8D,$82,$80,$8D,$AC,$D6,$48,$A3,$8B,$84,$84,$A0,$A3,$AC,$CB,$88,$8D,$AC,$A4,$87,$84,$AC,$82,$80,$A6,$84,$AC,$81,$84,$8B,$8E,$A7,$2A,$2A,$2A,$AC,$CB,$48,$85,$AC,$A9,$8E,$A5,$AC,$8B,$88,$8A,$84,$2B,$AC,$A7,$84,$0E,$8B,$8B,$AC,$D6,$97,$CB,$88,$A4,$AC,$A4,$8E,$AC,$D7,$C7,$CF,$40,$A4,$AC,$80,$8D,$A9,$AC,$A2,$80,$A4,$84,$2B,$AC,$86,$8E,$AC,$8B,$8E,$8E,$8A,$CB,$88,$8D,$AC,$A4,$87,$84,$AC,$82,$80,$A6,$84,$2A,$2A,$2A,$CB,$4A,$A5,$AC,$8A,$A5,$AC,$8A,$A5,$2A,$2A,$2A,$C0

;org $89D64D

org $89DD10
db $C1,$00,$17,$C7,$0F,$03,$D5,$05,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$42,$8B,$80,$A3,$A3,$AC,$88,$A3,$AC,$8E,$A6,$84,$A2,$2A,$CB,$C9,$B4,$CE,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$60,$8B,$84,$80,$A3,$84,$AC,$81,$84,$AC,$82,$80,$A2,$84,$85,$A5,$8B,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$82,$A2,$8E,$A3,$A3,$88,$8D,$86,$AC,$A4,$87,$84,$AC,$A3,$A4,$A2,$84,$84,$A4,$2A,$CB,$C9,$F0,$CE,$AC,$AC,$AC,$AC,$AC,$AC,$67,$84,$AC,$87,$80,$A6,$84,$AC,$87,$80,$83,$AC,$80,$AC,$8B,$8E,$A4,$AC,$8E,$85,$CB,$AC,$AC,$AC,$AC,$A4,$A2,$80,$85,$85,$88,$82,$AC,$80,$82,$82,$88,$83,$84,$8D,$A4,$A3,$AC,$8B,$80,$A4,$84,$8B,$A9,$2A,$CB,$C9,$68,$C8,$CA

;org $89DDA7



org $89F6A6
Bank89Free:
pad $8A0000
